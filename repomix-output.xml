This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
_redirects
.gitignore
GOOGLE_MAPS_SETUP.md
index.html
LOCAL_TESTING_CHECKLIST.md
netlify.toml
package.json
public/frame-87.svg
public/icon.svg
public/line-2.svg
public/line-4.svg
public/line-5.svg
public/line-6.svg
public/ripple.svg
src/App.tsx
src/components/EditQuoteModal.tsx
src/components/ui/avatar.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/footer.tsx
src/components/ui/gauge.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/LocationInput.tsx
src/components/ui/select.tsx
src/contexts/AuthContext.tsx
src/hooks/useDistanceCalculation.ts
src/hooks/useGoogleMaps.ts
src/index.tsx
src/lib/dashboardMetrics.ts
src/lib/exportUtils.ts
src/lib/googleMaps.ts
src/lib/quoteUtils.ts
src/lib/supabase.ts
src/lib/utils.ts
src/screens/AdminDashboard/AdminDashboard.tsx
src/screens/AllQuotes/AllQuotes.tsx
src/screens/CreateQuote/components/LocationWithDistance.tsx
src/screens/CreateQuote/components/StepSidebar.tsx
src/screens/CreateQuote/CreateQuote.tsx
src/screens/CreateQuote/steps/ClientInfoStep.tsx
src/screens/CreateQuote/steps/ProjectInfoStep.tsx
src/screens/CreateQuote/steps/SummaryStep.tsx
src/screens/Login/Login.tsx
src/screens/SuperAdminDashboard/SuperAdminAccounts.tsx
src/screens/SuperAdminDashboard/SuperAdminAllQuotes.tsx
src/screens/SuperAdminDashboard/SuperAdminAnalytics.tsx
src/screens/SuperAdminDashboard/SuperAdminDashboard.tsx
src/screens/UserSettings/UserSettings.tsx
supabase/functions/send-quote-email/index.ts
supabase/migrations/20251012000000_initial_complete_schema.sql
tailwind.config.js
tailwind.css
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env
</file>

<file path="public/icon.svg">
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9 16.5C8.3 16.5 7.70833 16.2583 7.225 15.775C6.74167 15.2917 6.5 14.7 6.5 14C6.5 13.3 6.74167 12.7083 7.225 12.225C7.70833 11.7417 8.3 11.5 9 11.5C9.7 11.5 10.2917 11.7417 10.775 12.225C11.2583 12.7083 11.5 13.3 11.5 14C11.5 14.7 11.2583 15.2917 10.775 15.775C10.2917 16.2583 9.7 16.5 9 16.5ZM5 22C4.45 22 3.97917 21.8042 3.5875 21.4125C3.19583 21.0208 3 20.55 3 20V6C3 5.45 3.19583 4.97917 3.5875 4.5875C3.97917 4.19583 4.45 4 5 4H6V2H8V4H16V2H18V4H19C19.55 4 20.0208 4.19583 20.4125 4.5875C20.8042 4.97917 21 5.45 21 6V20C21 20.55 20.8042 21.0208 20.4125 21.4125C20.0208 21.8042 19.55 22 19 22H5ZM5 20H19V10H5V20Z" fill="#49454F"/>
</svg>
</file>

<file path="public/line-2.svg">
<svg width="11" height="33" viewBox="0 0 11 33" fill="none" xmlns="http://www.w3.org/2000/svg">
<line x1="9.82006" y1="0.267004" x2="0.980663" y2="32.733" stroke="#007C8A" stroke-width="2"/>
</svg>
</file>

<file path="public/line-4.svg">
<svg width="32" height="1" viewBox="0 0 32 1" fill="none" xmlns="http://www.w3.org/2000/svg">
<line y1="0.5" x2="32" y2="0.5" stroke="#75C4CD" stroke-opacity="0.4"/>
</svg>
</file>

<file path="public/line-5.svg">
<svg width="27" height="1" viewBox="0 0 27 1" fill="none" xmlns="http://www.w3.org/2000/svg">
<line y1="0.5" x2="27" y2="0.5" stroke="#75C4CD" stroke-opacity="0.4"/>
</svg>
</file>

<file path="public/line-6.svg">
<svg width="48" height="1" viewBox="0 0 48 1" fill="none" xmlns="http://www.w3.org/2000/svg">
<line y1="0.5" x2="48" y2="0.5" stroke="#75C4CD" stroke-opacity="0.4"/>
</svg>
</file>

<file path="public/ripple.svg">
<svg width="38" height="28" viewBox="0 0 38 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M38 3.12389V28H0C0 12.536 11.6572 0 26.037 0C30.35 0 34.418 1.12771 38 3.12389Z" fill="#49454F" fill-opacity="0.1"/>
</svg>
</file>

<file path="src/components/ui/avatar.tsx">
"use client";

import * as AvatarPrimitive from "@radix-ui/react-avatar";
import * as React from "react";
import { cn } from "../../lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="src/components/ui/button.tsx">
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react";
import { cn } from "../../lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"

interface DialogProps {
  open?: boolean
  onOpenChange?: (open: boolean) => void
  children: React.ReactNode
}

export const Dialog = ({ open, onOpenChange, children }: DialogProps) => {
  if (!open) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div
        className="fixed inset-0 bg-black/50"
        onClick={() => onOpenChange?.(false)}
      />
      <div className="relative z-50 max-h-[90vh] overflow-y-auto">
        {children}
      </div>
    </div>
  )
}

interface DialogContentProps {
  children: React.ReactNode
  className?: string
}

export const DialogContent = ({ children, className = "" }: DialogContentProps) => {
  return (
    <div className={`bg-white rounded-lg shadow-xl p-6 ${className}`}>
      {children}
    </div>
  )
}

interface DialogHeaderProps {
  children: React.ReactNode
}

export const DialogHeader = ({ children }: DialogHeaderProps) => {
  return (
    <div className="mb-4">
      {children}
    </div>
  )
}

interface DialogTitleProps {
  children: React.ReactNode
}

export const DialogTitle = ({ children }: DialogTitleProps) => {
  return (
    <h2 className="text-2xl font-bold [font-family:'Lexend',Helvetica]">
      {children}
    </h2>
  )
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { cn } from "../../lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-gray-100 data-[state=open]:bg-gray-100",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-900 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-gray-200 bg-white p-1 text-gray-900 shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
        </svg>
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9.875 7.5C9.875 8.81168 8.81168 9.875 7.5 9.875C6.18832 9.875 5.125 8.81168 5.125 7.5C5.125 6.18832 6.18832 5.125 7.5 5.125C8.81168 5.125 9.875 6.18832 9.875 7.5Z" fill="currentColor"></path>
        </svg>
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-gray-200", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";
import { cn } from "../../lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };
</file>

<file path="src/components/ui/label.tsx">
import * as LabelPrimitive from "@radix-ui/react-label";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"

interface SelectProps {
  value: string
  onValueChange: (value: string) => void
  children: React.ReactNode
}

export const Select = ({ value, onValueChange, children }: SelectProps) => {
  return (
    <div className="relative">
      {React.Children.map(children, (child) => {
        if (React.isValidElement(child)) {
          return React.cloneElement(child, { value, onValueChange } as any)
        }
        return child
      })}
    </div>
  )
}

interface SelectTriggerProps {
  value?: string
  onValueChange?: (value: string) => void
  children: React.ReactNode
  className?: string
}

export const SelectTrigger = ({ children, className = "" }: SelectTriggerProps) => {
  return (
    <div className={`flex items-center justify-between px-3 py-2 border border-gray-300 rounded-lg bg-white cursor-pointer ${className}`}>
      {children}
    </div>
  )
}

interface SelectValueProps {
  placeholder?: string
  value?: string
}

export const SelectValue = ({ placeholder, value }: SelectValueProps) => {
  return (
    <span className="[font-family:'Lexend',Helvetica]">
      {value || placeholder}
    </span>
  )
}

interface SelectContentProps {
  children: React.ReactNode
  value?: string
  onValueChange?: (value: string) => void
}

export const SelectContent = ({ children, value, onValueChange }: SelectContentProps) => {
  return (
    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10 max-h-60 overflow-y-auto">
      {React.Children.map(children, (child) => {
        if (React.isValidElement(child)) {
          return React.cloneElement(child, { value, onValueChange } as any)
        }
        return child
      })}
    </div>
  )
}

interface SelectItemProps {
  value: string
  children: React.ReactNode
  onValueChange?: (value: string) => void
}

export const SelectItem = ({ value: itemValue, children, onValueChange }: SelectItemProps) => {
  return (
    <div
      className="px-3 py-2 hover:bg-gray-100 cursor-pointer [font-family:'Lexend',Helvetica]"
      onClick={() => onValueChange?.(itemValue)}
    >
      {children}
    </div>
  )
}
</file>

<file path="src/contexts/AuthContext.tsx">
import React, { createContext, useContext, useEffect, useState } from 'react';
import { User } from '@supabase/supabase-js';
import { supabase, Profile } from '../lib/supabase';

type AuthContextType = {
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<{ error: any }>;
  signUp: (email: string, password: string, fullName: string, role: 'superadmin' | 'admin') => Promise<{ error: any }>;
  signOut: () => Promise<void>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    const initAuth = async () => {
      try {
        console.log('Starting auth initialization...');
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();

        if (sessionError) {
          console.error('Session error:', sessionError);
          await supabase.auth.signOut();
        }

        console.log('Session retrieved:', session ? 'User found' : 'No session');

        if (!mounted) return;

        if (session?.user) {
          console.log('Loading profile for user:', session.user.id);
          setUser(session.user);
          await loadProfile(session.user.id);
        } else {
          setUser(null);
          setProfile(null);
        }
      } catch (error) {
        console.error('Init auth error:', error);
        if (mounted) {
          setUser(null);
          setProfile(null);
        }
      } finally {
        if (mounted) {
          console.log('Setting loading to false');
          setLoading(false);
        }
      }
    };

    const timeoutId = setTimeout(() => {
      if (mounted) {
        console.warn('Auth initialization timeout - forcing loading to false');
        setLoading(false);
        setUser(null);
        setProfile(null);
      }
    }, 5000);

    initAuth().finally(() => {
      clearTimeout(timeoutId);
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      (async () => {
        if (!mounted) return;

        if (session?.user) {
          setUser(session.user);
          await loadProfile(session.user.id);
        } else {
          setUser(null);
          setProfile(null);
        }
      })();
    });

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []);

  const loadProfile = async (userId: string) => {
    try {
      console.log('Fetching profile from database...');
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .maybeSingle();

      console.log('Profile query result:', { data, error });

      if (error) {
        console.error('Error loading profile:', error);
        return;
      }

      if (data) {
        console.log('Profile loaded successfully:', data.role);
        setProfile(data as Profile);
      } else {
        console.warn('No profile found for user:', userId);
        setProfile(null);
      }
    } catch (err) {
      console.error('Exception loading profile:', err);
    }
  };

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    return { error };
  };

  const signUp = async (email: string, password: string, fullName: string, role: 'superadmin' | 'admin') => {
    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: fullName,
            role: role,
          },
        },
      });

      if (authError) {
        return { error: authError };
      }

      if (!authData.user) {
        return { error: { message: 'Failed to create user' } };
      }

      return { error: null };
    } catch (err) {
      console.error('Signup exception:', err);
      return { error: err };
    }
  };

  const signOut = async () => {
    await supabase.auth.signOut();
  };

  const value = {
    user,
    profile,
    loading,
    signIn,
    signUp,
    signOut,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
</file>

<file path="src/index.tsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { App } from "./App";

createRoot(document.getElementById("app") as HTMLElement).render(
  <StrictMode>
    <App />
  </StrictMode>,
);
</file>

<file path="src/lib/dashboardMetrics.ts">
import { Quote } from './supabase';

export interface MonthlyData {
  month: string;
  revenue: number;
  quotes: number;
}

export interface DashboardMetrics {
  totalQuotes: number;
  quotesAccepted: number;
  quotesEmailed: number;
  quotesExported: number;
  totalFilmingHours: number;
  acceptedFilmingHours: number;
  totalPotentialRevenue: number;
  actualRevenue: number;
  daysScheduled: number;
  acceptedDaysScheduled: number;
  quotesPending: number;
  currentMonthRevenue: number;
  lastMonthRevenue: number;
  revenueGrowthPercent: number;
  currentMonthQuotes: number;
  lastMonthQuotes: number;
  quotesGrowthPercent: number;
  monthlyData: MonthlyData[];
}

export const calculateDashboardMetrics = (quotes: Quote[]): DashboardMetrics => {
  const totalQuotes = quotes.length;
  const acceptedQuotes = quotes.filter(q => q.is_accepted);
  const emailedQuotes = quotes.filter(q => q.status === 'emailed');
  const exportedQuotes = quotes.filter(q => q.status === 'exported' || q.status === 'downloaded');
  const pendingQuotes = quotes.filter(q => q.status === 'emailed' && !q.is_accepted);

  const totalFilmingHours = quotes.reduce((sum, q) => sum + (q.filming_hours || 0), 0);
  const acceptedFilmingHours = acceptedQuotes.reduce((sum, q) => sum + (q.filming_hours || 0), 0);

  const totalPotentialRevenue = quotes.reduce((sum, q) => sum + (q.revenue || 0), 0);
  const actualRevenue = acceptedQuotes.reduce((sum, q) => sum + (q.revenue || 0), 0);

  const daysScheduled = quotes.filter(q => q.project_start_date).length;
  const acceptedDaysScheduled = acceptedQuotes.filter(q => q.project_start_date).length;

  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();
  const lastMonth = currentMonth === 0 ? 11 : currentMonth - 1;
  const lastMonthYear = currentMonth === 0 ? currentYear - 1 : currentYear;

  const currentMonthQuotesData = acceptedQuotes.filter(q => {
    const acceptedDate = new Date(q.accepted_at || q.updated_at);
    return acceptedDate.getMonth() === currentMonth && acceptedDate.getFullYear() === currentYear;
  });

  const lastMonthQuotesData = acceptedQuotes.filter(q => {
    const acceptedDate = new Date(q.accepted_at || q.updated_at);
    return acceptedDate.getMonth() === lastMonth && acceptedDate.getFullYear() === lastMonthYear;
  });

  const currentMonthRevenue = currentMonthQuotesData.reduce((sum, q) => sum + (q.revenue || 0), 0);
  const lastMonthRevenue = lastMonthQuotesData.reduce((sum, q) => sum + (q.revenue || 0), 0);
  const revenueGrowthPercent = lastMonthRevenue > 0
    ? Math.round(((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100)
    : currentMonthRevenue > 0 ? 100 : 0;

  const currentMonthQuotes = currentMonthQuotesData.length;
  const lastMonthQuotes = lastMonthQuotesData.length;
  const quotesGrowthPercent = lastMonthQuotes > 0
    ? Math.round(((currentMonthQuotes - lastMonthQuotes) / lastMonthQuotes) * 100)
    : currentMonthQuotes > 0 ? 100 : 0;

  const monthlyData: MonthlyData[] = [];
  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  for (let i = 5; i >= 0; i--) {
    const targetDate = new Date(currentYear, currentMonth - i, 1);
    const targetMonth = targetDate.getMonth();
    const targetYear = targetDate.getFullYear();

    const monthQuotes = acceptedQuotes.filter(q => {
      const acceptedDate = new Date(q.accepted_at || q.updated_at);
      return acceptedDate.getMonth() === targetMonth && acceptedDate.getFullYear() === targetYear;
    });

    const monthRevenue = monthQuotes.reduce((sum, q) => sum + (q.revenue || 0), 0);

    monthlyData.push({
      month: monthNames[targetMonth],
      revenue: Math.round(monthRevenue),
      quotes: monthQuotes.length
    });
  }

  return {
    totalQuotes,
    quotesAccepted: acceptedQuotes.length,
    quotesEmailed: emailedQuotes.length,
    quotesExported: exportedQuotes.length,
    totalFilmingHours: Math.round(totalFilmingHours),
    acceptedFilmingHours: Math.round(acceptedFilmingHours),
    totalPotentialRevenue: Math.round(totalPotentialRevenue),
    actualRevenue: Math.round(actualRevenue),
    daysScheduled,
    acceptedDaysScheduled,
    quotesPending: pendingQuotes.length,
    currentMonthRevenue: Math.round(currentMonthRevenue),
    lastMonthRevenue: Math.round(lastMonthRevenue),
    revenueGrowthPercent,
    currentMonthQuotes,
    lastMonthQuotes,
    quotesGrowthPercent,
    monthlyData,
  };
};
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="tailwind.config.js">
module.exports = {
  content: [
    "./src/**/*.{html,js,ts,jsx,tsx}",
    "app/**/*.{ts,tsx}",
    "components/**/*.{ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        "app-secondary": "var(--app-secondary)",
        "dark-blue": "var(--dark-blue)",
        "darker-blue": "var(--darker-blue)",
        "m3state-layerslightonsurfacevariantopacity-008":
          "var(--m3state-layerslightonsurfacevariantopacity-008)",
        "m3state-layerslightonsurfacevariantopacity-010":
          "var(--m3state-layerslightonsurfacevariantopacity-010)",
        "m3syslighton-surface-variant": "var(--m3syslighton-surface-variant)",
        white: "var(--white)",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: [
          "ui-sans-serif",
          "system-ui",
          "sans-serif",
          '"Apple Color Emoji"',
          '"Segoe UI Emoji"',
          '"Segoe UI Symbol"',
          '"Noto Color Emoji"',
        ],
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
    container: { center: true, padding: "2rem", screens: { "2xl": "1400px" } },
  },
  plugins: [],
  darkMode: ["class"],
};
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "src"
  ]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": [
      "ES2023"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "vite.config.ts"
  ]
}
</file>

<file path="vite.config.ts">
import react from "@vitejs/plugin-react";
import tailwind from "tailwindcss";
import { defineConfig } from "vite";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  base: "./",
  css: {
    postcss: {
      plugins: [tailwind()],
    },
  },
});
</file>

<file path="_redirects">
echo "/*    /index.html   200" > public/_redirects
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Vid-QUO</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <style>
      @import url("https://fonts.googleapis.com/css?family=Lexend:400,700");
    </style>
    <link href="tailwind.css" rel="stylesheet" />
    <link href="tailwind.css" rel="stylesheet" />
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="./src/index.tsx"></script>
  </body>
</html>
</file>

<file path="LOCAL_TESTING_CHECKLIST.md">
# Local Testing Checklist

Use this checklist to verify Google Maps API is working correctly in your local environment.

## Before You Start

- [ ] Ensure `.env` file exists with `VITE_GOOGLE_MAPS_API_KEY=your_key`
- [ ] Verify API key is NOT the placeholder value
- [ ] Restart dev server after any `.env` changes: `npm run dev`
- [ ] Open browser console (F12) to view debug logs

## Test 1: Google Maps Script Loading

**Expected Console Logs:**
```
[useGoogleMaps] Initializing Google Maps SDK
[useGoogleMaps] Google Maps loaded successfully
```

**If you see errors:**
- `API key is missing` → Check your .env file
- `Failed to load script` → Check your network connection and API key validity
- `RefererNotAllowedMapError` → Add localhost to API key restrictions (see GOOGLE_MAPS_SETUP.md)

## Test 2: Address Autocomplete

1. Navigate to "Create Quote" page
2. Go to "Project Information" step
3. Click on a location address field
4. Type at least 3 characters (e.g., "123 Main")

**Expected Results:**
- [ ] Dropdown appears with address suggestions
- [ ] Suggestions include street, city, state
- [ ] Clicking a suggestion fills the input field

**Expected Console Logs:**
```
[LocationInput] Initializing AutocompleteService
[LocationInput] Autocomplete status: OK predictions: 5
```

**If autocomplete fails:**
- Check console for `[LocationInput]` errors
- Verify "Places API" is enabled in Google Cloud Console
- Confirm API key has Places API restriction enabled

## Test 3: Distance Calculation

1. Stay on "Project Information" step
2. Enter a complete address in the first location field
3. Enter a different complete address in the second location field
4. Wait 1.5 seconds (debounce delay)

**Expected Results:**
- [ ] Loading spinner appears in distance badge
- [ ] Distance displays in miles (e.g., "15 miles to")
- [ ] Duration displays (e.g., "25 mins")
- [ ] Distance updates automatically when addresses change

**Expected Console Logs:**
```
[Distance Calculation] Starting calculation
[Distance Calculation] Success: { miles: 15, minutes: 25, ... }
```

**If distance calculation fails:**
- Check for `[Distance Calculation]` errors in console
- Verify "Distance Matrix API" is enabled in Google Cloud Console
- Ensure both addresses are valid and complete
- Check that API key has Distance Matrix API restriction enabled

## Test 4: Multiple Locations

1. Add multiple filming days
2. Add multiple locations per day
3. Verify distance calculation works between each location pair

**Expected Results:**
- [ ] Each location calculates distance from previous location
- [ ] First location shows "Starting Location" (no distance)
- [ ] All subsequent locations show distance and duration
- [ ] Calculations update when addresses change

## Common Issues & Solutions

### Issue: "Google Maps not loaded"
**Solution:**
1. Check browser console for script loading errors
2. Verify API key in .env file
3. Hard refresh browser (Ctrl+Shift+R)
4. Check Google Cloud Console for API key status

### Issue: No autocomplete suggestions
**Solution:**
1. Type at least 3 characters
2. Check that Places API is enabled
3. Verify API key restrictions include Places API
4. Look for console errors starting with `[LocationInput]`

### Issue: Distance shows 0 or doesn't update
**Solution:**
1. Wait for debounce (1.5 seconds after typing)
2. Ensure both addresses are complete and valid
3. Check Distance Matrix API is enabled
4. Look for console errors starting with `[Distance Calculation]`

### Issue: "REQUEST_DENIED" errors
**Solution:**
1. Check all required APIs are enabled:
   - Maps JavaScript API
   - Places API
   - Distance Matrix API
   - Geocoding API
2. Verify API restrictions in Google Cloud Console
3. Confirm HTTP referrers include `http://localhost:*`

## Network Debugging

Open DevTools → Network Tab:

1. **Filter by:** `maps.googleapis.com`
2. **Check for:**
   - Script load: `maps/api/js?key=...` → Status 200
   - No CORS errors (should not see REST API calls)
3. **If you see errors:**
   - 403: API key restrictions issue
   - 400: Malformed request
   - 404: Endpoint not found (shouldn't happen with SDK)

## Success Criteria

Your Google Maps integration is working correctly if:

- ✅ Console shows successful Google Maps load
- ✅ Address fields show autocomplete suggestions
- ✅ Distance calculations work between locations
- ✅ No console errors related to Google Maps
- ✅ UI updates smoothly without freezing

## Still Having Issues?

1. Check `GOOGLE_MAPS_SETUP.md` for detailed configuration steps
2. Verify all API keys and restrictions in Google Cloud Console
3. Clear browser cache and restart dev server
4. Test your API key directly in browser:
   ```
   https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&libraries=places
   ```

## Performance Tips

- Autocomplete debounces after 3 characters (no API calls for 1-2 chars)
- Distance calculation debounces for 1.5 seconds
- Multiple simultaneous calculations are handled efficiently
- Console logs can be removed in production for better performance
</file>

<file path="netlify.toml">
# Netlify Configuration for Vidquo
# Documentation: https://docs.netlify.com/configure-builds/file-based-configuration/

[build]
  # Build command - runs when deploying
  command = "npm run build"

  # Directory containing the built files to publish
  publish = "dist"

  # Base directory for the build (project root)
  base = "."

# Production environment configuration
[context.production]
  # Environment variables for production builds
  # Note: For sensitive values like API keys, set these in Netlify UI instead
  # This file is for non-sensitive build configuration only
  [context.production.environment]
    # NODE_VERSION = "20"
    # VITE_GOOGLE_MAPS_API_KEY = "SET_IN_NETLIFY_UI"

# Deploy Preview environment configuration
# Used for pull request previews
[context.deploy-preview]
  # You can use different build commands for previews if needed
  # command = "npm run build"

  [context.deploy-preview.environment]
    # NODE_VERSION = "20"
    # VITE_GOOGLE_MAPS_API_KEY = "SET_IN_NETLIFY_UI"

# Branch deploys configuration
# Uncomment and customize for specific branches
# [context.branch-deploy]
#   command = "npm run build"

# Redirect rules
# [[redirects]]
#   from = "/api/*"
#   to = "/.netlify/functions/:splat"
#   status = 200

# Headers configuration for security
[[headers]]
  for = "/*"
  [headers.values]
    # Security headers
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"

    # Cache control for assets
    Cache-Control = "public, max-age=0, must-revalidate"

[[headers]]
  for = "/assets/*"
  [headers.values]
    # Cache static assets for 1 year
    Cache-Control = "public, max-age=31536000, immutable"

# Build plugins (if needed in the future)
# [[plugins]]
#   package = "@netlify/plugin-lighthouse"

# Environment variable configuration guide:
#
# IMPORTANT: Do NOT set sensitive values like API keys in this file!
# This file is committed to version control.
#
# Instead, set environment variables in one of these ways:
#
# 1. Netlify UI (Recommended for sensitive values):
#    - Go to: https://app.netlify.com/sites/vidquo/configuration/env
#    - Add: VITE_GOOGLE_MAPS_API_KEY
#    - Scope: Builds
#    - Context: Production, Deploy Previews, etc.
#
# 2. Netlify CLI:
#    netlify env:set VITE_GOOGLE_MAPS_API_KEY "your_key_here"
#
# 3. Import from .env file:
#    netlify env:import .env
#
# Required environment variables for this project:
# - VITE_GOOGLE_MAPS_API_KEY (Google Maps API key)
# - VITE_SUPABASE_URL (already configured)
# - VITE_SUPABASE_ANON_KEY (already configured)
</file>

<file path="src/App.tsx">
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { Login } from './screens/Login/Login';
import { SuperAdminAnalytics } from './screens/SuperAdminDashboard/SuperAdminAnalytics';
import { SuperAdminAllQuotes } from './screens/SuperAdminDashboard/SuperAdminAllQuotes';
import { SuperAdminAccounts } from './screens/SuperAdminDashboard/SuperAdminAccounts';
import { AdminDashboard } from './screens/AdminDashboard/AdminDashboard';
import { CreateQuote } from './screens/CreateQuote/CreateQuote';
import { AllQuotes } from './screens/AllQuotes/AllQuotes';
import { UserSettings } from './screens/UserSettings/UserSettings';

function ProtectedRoute({ children, allowedRoles }: { children: React.ReactNode; allowedRoles?: ('superadmin' | 'admin')[] }) {
  const { user, profile, loading } = useAuth();

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  if (allowedRoles && profile && !allowedRoles.includes(profile.role)) {
    return <Navigate to="/dashboard" replace />;
  }

  return <>{children}</>;
}

function DashboardRouter() {
  const { profile, loading } = useAuth();

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  if (profile?.role === 'superadmin') {
    return <Navigate to="/superadmin" replace />;
  }

  return <AdminDashboard />;
}

function AppRoutes() {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <Routes>
      <Route
        path="/login"
        element={user ? <Navigate to="/dashboard" replace /> : <Login />}
      />
      <Route
        path="/dashboard"
        element={
          <ProtectedRoute>
            <DashboardRouter />
          </ProtectedRoute>
        }
      />
      <Route
        path="/admin-dashboard"
        element={
          <ProtectedRoute>
            <AdminDashboard />
          </ProtectedRoute>
        }
      />
      <Route
        path="/superadmin"
        element={
          <ProtectedRoute allowedRoles={['superadmin']}>
            <SuperAdminAnalytics />
          </ProtectedRoute>
        }
      />
      <Route
        path="/superadmin/all-quotes"
        element={
          <ProtectedRoute allowedRoles={['superadmin']}>
            <SuperAdminAllQuotes />
          </ProtectedRoute>
        }
      />
      <Route
        path="/superadmin/accounts"
        element={
          <ProtectedRoute allowedRoles={['superadmin']}>
            <SuperAdminAccounts />
          </ProtectedRoute>
        }
      />
      <Route
        path="/create-quote"
        element={
          <ProtectedRoute>
            <CreateQuote />
          </ProtectedRoute>
        }
      />
      <Route
        path="/all-quotes"
        element={
          <ProtectedRoute>
            <AllQuotes />
          </ProtectedRoute>
        }
      />
      <Route
        path="/settings"
        element={
          <ProtectedRoute>
            <UserSettings />
          </ProtectedRoute>
        }
      />
      <Route path="/" element={<Navigate to="/dashboard" replace />} />
    </Routes>
  );
}

export function App() {
  return (
    <Router>
      <AuthProvider>
        <AppRoutes />
      </AuthProvider>
    </Router>
  );
}
</file>

<file path="src/components/ui/LocationInput.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { Input } from './input';
import { MapPin } from 'lucide-react';

interface LocationInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  label?: string;
  onLocationSelect?: (address: string) => void;
}

export const LocationInput: React.FC<LocationInputProps> = ({
  value,
  onChange,
  placeholder = 'Enter address',
  label,
  onLocationSelect,
}) => {
  const [suggestions, setSuggestions] = useState<google.maps.places.AutocompletePrediction[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (window.google && window.google.maps && window.google.maps.places) {
      console.log('[LocationInput] Initializing AutocompleteService');
      autocompleteService.current = new google.maps.places.AutocompleteService();
    } else {
      console.warn('[LocationInput] Google Maps Places API not available yet');
    }
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    onChange(newValue);

    if (newValue.length > 2 && autocompleteService.current) {
      autocompleteService.current.getPlacePredictions(
        {
          input: newValue,
          componentRestrictions: { country: 'us' },
        },
        (predictions, status) => {
          console.log('[LocationInput] Autocomplete status:', status, 'predictions:', predictions?.length || 0);
          if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {
            setSuggestions(predictions);
            setShowSuggestions(true);
          } else if (status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
            setSuggestions([]);
            setShowSuggestions(false);
          } else {
            console.error('[LocationInput] Autocomplete error:', status);
            setSuggestions([]);
            setShowSuggestions(false);
          }
        }
      );
    } else {
      setSuggestions([]);
      setShowSuggestions(false);
    }
  };

  const handleSuggestionClick = (suggestion: google.maps.places.AutocompletePrediction) => {
    onChange(suggestion.description);
    if (onLocationSelect) {
      onLocationSelect(suggestion.description);
    }
    setSuggestions([]);
    setShowSuggestions(false);
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (inputRef.current && !inputRef.current.contains(event.target as Node)) {
        setShowSuggestions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative" ref={inputRef}>
      {label && (
        <label className="[font-family:'Lexend',Helvetica] text-sm font-medium text-gray-700 mb-2 block">
          {label}
        </label>
      )}
      <div className="relative">
        <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
        <Input
          value={value}
          onChange={handleInputChange}
          placeholder={placeholder}
          className="pl-10"
        />
      </div>
      {showSuggestions && suggestions.length > 0 && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto">
          {suggestions.map((suggestion) => (
            <button
              key={suggestion.place_id}
              onClick={() => handleSuggestionClick(suggestion)}
              className="w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 transition-colors [font-family:'Lexend',Helvetica] text-sm"
            >
              <div className="flex items-start gap-2">
                <MapPin className="w-4 h-4 text-gray-400 mt-0.5 flex-shrink-0" />
                <div>
                  <div className="font-medium text-gray-900">
                    {suggestion.structured_formatting.main_text}
                  </div>
                  <div className="text-xs text-gray-500">
                    {suggestion.structured_formatting.secondary_text}
                  </div>
                </div>
              </div>
            </button>
          ))}
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/hooks/useDistanceCalculation.ts">
import { useState, useEffect, useCallback } from 'react';

interface DistanceResult {
  distance: {
    miles: number;
    km: number;
  };
  duration: {
    minutes: number;
    text: string;
  };
  origin: {
    lat: number;
    lng: number;
  };
  destination: {
    lat: number;
    lng: number;
  };
}

interface UseDistanceCalculationOptions {
  debounceMs?: number;
  includeMetrics?: boolean;
}

export const useDistanceCalculation = (
  origin: string,
  destination: string,
  options: UseDistanceCalculationOptions = {}
) => {
  const { debounceMs = 1500, includeMetrics = true } = options;

  const [result, setResult] = useState<DistanceResult | null>(null);
  const [distance, setDistance] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const calculateDistance = useCallback(async () => {
    if (!origin?.trim() || !destination?.trim()) {
      setResult(null);
      setDistance(null);
      setError(null);
      return;
    }

    const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;
    if (!apiKey || apiKey === 'YOUR_API_KEY_HERE') {
      console.error('[Distance Calculation] API key not configured');
      setError('Google Maps API key not configured');
      return;
    }

    if (!window.google?.maps) {
      console.error('[Distance Calculation] Google Maps SDK not loaded');
      setError('Google Maps not loaded. Please refresh the page.');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      console.log('[Distance Calculation] Starting calculation', { origin, destination });

      const distanceMatrixService = new google.maps.DistanceMatrixService();

      const matrixResult = await new Promise<google.maps.DistanceMatrixResponse>((resolve, reject) => {
        distanceMatrixService.getDistanceMatrix(
          {
            origins: [origin],
            destinations: [destination],
            travelMode: google.maps.TravelMode.DRIVING,
            unitSystem: google.maps.UnitSystem.IMPERIAL,
          },
          (response, status) => {
            if (status === google.maps.DistanceMatrixStatus.OK && response) {
              resolve(response);
            } else {
              console.error('[Distance Calculation] Distance Matrix failed:', status);
              reject(new Error(`Distance Matrix API error: ${status}`));
            }
          }
        );
      });

      if (!matrixResult.rows || matrixResult.rows.length === 0) {
        console.warn('[Distance Calculation] No results in matrix response');
        setError('No route found between the addresses.');
        setResult(null);
        setDistance(null);
        setLoading(false);
        return;
      }

      const element = matrixResult.rows[0].elements[0];

      if (element.status !== google.maps.DistanceMatrixElementStatus.OK) {
        console.error('[Distance Calculation] Element status error:', element.status);
        setError('Could not calculate distance between these addresses.');
        setResult(null);
        setDistance(null);
        setLoading(false);
        return;
      }

      const distanceMeters = element.distance.value;
      const durationSeconds = element.duration.value;
      const miles = distanceMeters * 0.000621371;
      const roundedMiles = Math.round(miles);
      const minutes = Math.round(durationSeconds / 60);

      console.log('[Distance Calculation] Success:', {
        miles: roundedMiles,
        minutes,
        distance: element.distance.text,
        duration: element.duration.text
      });

      setDistance(roundedMiles);

      if (includeMetrics) {
        const geocoder = new google.maps.Geocoder();

        const [originGeocode, destGeocode] = await Promise.all([
          new Promise<google.maps.GeocoderResult>((resolve, reject) => {
            geocoder.geocode({ address: origin }, (results, status) => {
              if (status === 'OK' && results && results[0]) {
                resolve(results[0]);
              } else {
                reject(new Error('Origin geocoding failed'));
              }
            });
          }),
          new Promise<google.maps.GeocoderResult>((resolve, reject) => {
            geocoder.geocode({ address: destination }, (results, status) => {
              if (status === 'OK' && results && results[0]) {
                resolve(results[0]);
              } else {
                reject(new Error('Destination geocoding failed'));
              }
            });
          })
        ]);

        setResult({
          distance: {
            miles: miles,
            km: distanceMeters / 1000,
          },
          duration: {
            minutes: minutes,
            text: element.duration.text,
          },
          origin: {
            lat: originGeocode.geometry.location.lat(),
            lng: originGeocode.geometry.location.lng(),
          },
          destination: {
            lat: destGeocode.geometry.location.lat(),
            lng: destGeocode.geometry.location.lng(),
          },
        });
      }

      setError(null);
    } catch (err) {
      console.error('[Distance Calculation] Error:', err);
      const errorMessage = err instanceof Error ? err.message : 'Failed to calculate distance';
      setError(errorMessage);
      setResult(null);
      setDistance(null);
    } finally {
      setLoading(false);
    }
  }, [origin, destination, includeMetrics]);

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      calculateDistance();
    }, debounceMs);

    return () => clearTimeout(timeoutId);
  }, [calculateDistance, debounceMs]);

  return { result, distance, loading, error, recalculate: calculateDistance };
};
</file>

<file path="src/hooks/useGoogleMaps.ts">
import { useEffect, useState } from 'react';

interface UseGoogleMapsOptions {
  apiKey: string;
}

export const useGoogleMaps = ({ apiKey }: UseGoogleMapsOptions) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [loadError, setLoadError] = useState<Error | null>(null);

  useEffect(() => {
    if (!apiKey) {
      console.error('[useGoogleMaps] API key is missing');
      setLoadError(new Error('Google Maps API key is required'));
      return;
    }

    if (apiKey === 'YOUR_API_KEY_HERE') {
      console.error('[useGoogleMaps] API key is placeholder value');
      setLoadError(new Error('Google Maps API key not configured'));
      return;
    }

    console.log('[useGoogleMaps] Initializing Google Maps SDK');

    if (window.google && window.google.maps) {
      console.log('[useGoogleMaps] Google Maps already loaded');
      setIsLoaded(true);
      return;
    }

    const existingScript = document.querySelector(
      `script[src*="maps.googleapis.com/maps/api"]`
    );

    if (existingScript) {
      console.log('[useGoogleMaps] Script tag exists, waiting for load');
      let attempts = 0;
      const maxAttempts = 50;
      const checkIfLoaded = setInterval(() => {
        attempts++;
        if (window.google && window.google.maps) {
          console.log('[useGoogleMaps] Google Maps loaded successfully');
          setIsLoaded(true);
          clearInterval(checkIfLoaded);
        } else if (attempts >= maxAttempts) {
          console.error('[useGoogleMaps] Timeout waiting for Google Maps to load');
          setLoadError(new Error('Timeout loading Google Maps'));
          clearInterval(checkIfLoaded);
        }
      }, 100);

      return () => clearInterval(checkIfLoaded);
    }

    console.log('[useGoogleMaps] Creating new script tag');
    const script = document.createElement('script');
    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
    script.async = true;
    script.defer = true;

    script.onload = () => {
      if (window.google && window.google.maps) {
        console.log('[useGoogleMaps] Script loaded successfully');
        setIsLoaded(true);
      } else {
        console.error('[useGoogleMaps] Script loaded but google.maps not available');
        setLoadError(new Error('Google Maps object not found after script load'));
      }
    };

    script.onerror = (event) => {
      console.error('[useGoogleMaps] Failed to load script:', event);
      setLoadError(new Error('Failed to load Google Maps script. Check your API key and network connection.'));
    };

    document.head.appendChild(script);

    return () => {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
    };
  }, [apiKey]);

  useEffect(() => {
    if (loadError) {
      console.error('[useGoogleMaps] Load error:', loadError.message);
    }
  }, [loadError]);

  return { isLoaded, loadError };
};
</file>

<file path="src/lib/googleMaps.ts">
interface DistanceMatrixResult {
  distance: {
    miles: number;
    km: number;
  };
  duration: {
    minutes: number;
    text: string;
  };
  origin: {
    lat: number;
    lng: number;
  };
  destination: {
    lat: number;
    lng: number;
  };
}

interface GeocodeResult {
  lat: number;
  lng: number;
  formattedAddress: string;
}

export class GoogleMapsService {
  private isGoogleMapsLoaded(): boolean {
    return !!(window.google && window.google.maps);
  }

  async geocodeAddress(address: string): Promise<GeocodeResult | null> {
    if (!address.trim()) {
      return null;
    }

    if (!this.isGoogleMapsLoaded()) {
      console.error('[GoogleMapsService] Google Maps SDK not loaded');
      return null;
    }

    try {
      const geocoder = new google.maps.Geocoder();

      const result = await new Promise<google.maps.GeocoderResult>((resolve, reject) => {
        geocoder.geocode({ address }, (results, status) => {
          if (status === google.maps.GeocoderStatus.OK && results && results[0]) {
            resolve(results[0]);
          } else {
            reject(new Error(`Geocoding failed: ${status}`));
          }
        });
      });

      return {
        lat: result.geometry.location.lat(),
        lng: result.geometry.location.lng(),
        formattedAddress: result.formatted_address,
      };
    } catch (error) {
      console.error('[GoogleMapsService] Geocoding error:', error);
      return null;
    }
  }

  async calculateDistance(
    origin: string,
    destination: string
  ): Promise<DistanceMatrixResult | null> {
    if (!origin.trim() || !destination.trim()) {
      return null;
    }

    if (!this.isGoogleMapsLoaded()) {
      console.error('[GoogleMapsService] Google Maps SDK not loaded');
      return null;
    }

    try {
      const distanceMatrixService = new google.maps.DistanceMatrixService();

      const matrixResult = await new Promise<google.maps.DistanceMatrixResponse>((resolve, reject) => {
        distanceMatrixService.getDistanceMatrix(
          {
            origins: [origin],
            destinations: [destination],
            travelMode: google.maps.TravelMode.DRIVING,
            unitSystem: google.maps.UnitSystem.IMPERIAL,
          },
          (response, status) => {
            if (status === google.maps.DistanceMatrixStatus.OK && response) {
              resolve(response);
            } else {
              reject(new Error(`Distance Matrix API error: ${status}`));
            }
          }
        );
      });

      if (
        !matrixResult.rows ||
        matrixResult.rows.length === 0 ||
        !matrixResult.rows[0].elements ||
        matrixResult.rows[0].elements.length === 0
      ) {
        console.warn('[GoogleMapsService] No results in distance matrix');
        return null;
      }

      const element = matrixResult.rows[0].elements[0];

      if (element.status !== google.maps.DistanceMatrixElementStatus.OK) {
        console.warn('[GoogleMapsService] Distance element status:', element.status);
        return null;
      }

      const distanceMeters = element.distance.value;
      const durationSeconds = element.duration.value;

      const [originGeocode, destGeocode] = await Promise.all([
        this.geocodeAddress(origin),
        this.geocodeAddress(destination)
      ]);

      if (!originGeocode || !destGeocode) {
        console.error('[GoogleMapsService] Failed to geocode origin or destination');
        return null;
      }

      return {
        distance: {
          miles: distanceMeters * 0.000621371,
          km: distanceMeters / 1000,
        },
        duration: {
          minutes: Math.round(durationSeconds / 60),
          text: element.duration.text,
        },
        origin: {
          lat: originGeocode.lat,
          lng: originGeocode.lng,
        },
        destination: {
          lat: destGeocode.lat,
          lng: destGeocode.lng,
        },
      };
    } catch (error) {
      console.error('[GoogleMapsService] Distance calculation error:', error);
      return null;
    }
  }

  async getPlaceAutocomplete(input: string): Promise<google.maps.places.AutocompletePrediction[]> {
    if (!input.trim()) {
      return [];
    }

    if (!this.isGoogleMapsLoaded() || !window.google.maps.places) {
      console.error('[GoogleMapsService] Google Maps Places SDK not loaded');
      return [];
    }

    try {
      const autocompleteService = new google.maps.places.AutocompleteService();

      const predictions = await new Promise<google.maps.places.AutocompletePrediction[]>((resolve, reject) => {
        autocompleteService.getPlacePredictions(
          {
            input,
            componentRestrictions: { country: 'us' },
          },
          (results, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && results) {
              resolve(results);
            } else if (status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
              resolve([]);
            } else {
              reject(new Error(`Autocomplete error: ${status}`));
            }
          }
        );
      });

      return predictions;
    } catch (error) {
      console.error('[GoogleMapsService] Autocomplete error:', error);
      return [];
    }
  }
}
</file>

<file path="src/lib/quoteUtils.ts">
export const getStatusColor = (status: string, variant: 'badge' | 'text' = 'badge') => {
  if (variant === 'badge') {
    switch (status) {
      case 'accepted':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'draft':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  } else {
    switch (status) {
      case 'accepted':
        return 'text-green-600';
      case 'pending':
        return 'text-yellow-600';
      case 'draft':
        return 'text-gray-600';
      default:
        return 'text-gray-600';
    }
  }
};

export const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: '2-digit',
    day: '2-digit',
    year: '2-digit',
  });
};
</file>

<file path="src/lib/supabase.ts">
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables. Please add VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY to your .env file.');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export type Profile = {
  id: string;
  email: string;
  full_name: string | null;
  role: 'superadmin' | 'admin';
  created_at: string;
  updated_at: string;
};

export type Quote = {
  id: string;
  client_id: string;
  client_name: string;
  client_email: string;
  client_phone: string | null;
  production_company: string | null;
  project_start_date: string | null;
  project_end_date: string | null;
  tier: 'standard' | 'premium' | null;
  status: 'draft' | 'done' | 'exported' | 'emailed' | 'downloaded';
  created_at: string;
  updated_at: string;
  filming_hours: number;
  revenue: number;
  is_accepted: boolean;
  accepted_at: string | null;
  form_data?: any;
};

export type DashboardStats = {
  id: string;
  user_id: string;
  total_clients: number;
  total_revenue: number;
  total_quotes: number;
  clients_change_percent: number;
  revenue_change_percent: number;
  quotes_change_percent: number;
  updated_at: string;
};
</file>

<file path="src/screens/CreateQuote/components/LocationWithDistance.tsx">
import React, { useEffect } from 'react';
import { LocationInput } from '../../../components/ui/LocationInput';
import { useDistanceCalculation } from '../../../hooks/useDistanceCalculation';
import { ArrowDownRight, Clock } from 'lucide-react';

interface LocationWithDistanceProps {
  locationIndex: number;
  dayIndex: number;
  location: {
    address: string;
    miles: number;
    requiresSetup: boolean;
  };
  previousAddress: string;
  updateLocation: (
    dayIndex: number,
    locationIndex: number,
    field: string,
    value: any
  ) => void;
}

export const LocationWithDistance: React.FC<LocationWithDistanceProps> = ({
  locationIndex,
  dayIndex,
  location,
  previousAddress,
  updateLocation,
}) => {
  const { distance, result, loading } = useDistanceCalculation(
    previousAddress,
    location.address,
    { debounceMs: 1500, includeMetrics: true }
  );

  useEffect(() => {
    if (distance !== null && distance !== location.miles) {
      updateLocation(dayIndex, locationIndex, 'miles', distance);
    }
  }, [distance, dayIndex, locationIndex, location.miles, updateLocation]);

  const isFirstLocation = locationIndex === 0;

  return (
    <div className="space-y-3">
      {isFirstLocation ? (
        <>
          <div>
            <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600 mb-2">
              Starting Location
            </div>
            <div className="flex items-center gap-3">
              <div className="flex-1">
                <LocationInput
                  value={location.address}
                  onChange={(value) =>
                    updateLocation(dayIndex, locationIndex, 'address', value)
                  }
                  placeholder="123 Address City"
                  onLocationSelect={(address) =>
                    updateLocation(dayIndex, locationIndex, 'address', address)
                  }
                />
              </div>
            </div>
          </div>
          <div className="flex items-center justify-end">
            <div className="flex items-center gap-2">
              <span className="[font-family:'Lexend',Helvetica] text-sm">
                Setup required?
              </span>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name={`setup-${dayIndex}-${locationIndex}`}
                  checked={location.requiresSetup === true}
                  onChange={() =>
                    updateLocation(dayIndex, locationIndex, 'requiresSetup', true)
                  }
                  className="w-4 h-4"
                />
                <span className="[font-family:'Lexend',Helvetica] text-sm">
                  Yes
                </span>
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name={`setup-${dayIndex}-${locationIndex}`}
                  checked={location.requiresSetup === false}
                  onChange={() =>
                    updateLocation(dayIndex, locationIndex, 'requiresSetup', false)
                  }
                  className="w-4 h-4"
                />
                <span className="[font-family:'Lexend',Helvetica] text-sm">
                  No
                </span>
              </label>
            </div>
          </div>
        </>
      ) : (
        <div className="relative">
          <div className="absolute left-0 top-0 h-12 border-l-2 border-b-2 border-[#003D82] rounded-bl-lg" style={{ width: '32px', left: '0px' }}>
            <div className="absolute right-0 top-full -mt-1.5 -mr-0.5">
              <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0 6L12 6L7 11L7 1L12 6Z" fill="#003D82"/>
              </svg>
            </div>
          </div>

          <div className="pl-12 space-y-3">
            <div className="relative bg-gradient-to-r from-blue-50 to-transparent border-2 border-blue-200 rounded-lg p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="flex items-center gap-2 bg-white px-3 py-1.5 rounded-md border border-blue-300">
                  {loading ? (
                    <div className="w-4 h-4 border-2 border-[#003D82] border-t-transparent rounded-full animate-spin"></div>
                  ) : (
                    <span className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-lg">
                      {location.miles}
                    </span>
                  )}
                  <span className="[font-family:'Lexend',Helvetica] text-xs font-medium text-gray-600">
                    {loading ? 'calculating...' : 'miles to'}
                  </span>
                </div>
                {!loading && result?.duration && (
                  <div className="flex items-center gap-2 bg-white px-3 py-1.5 rounded-md border border-blue-300">
                    <Clock className="w-4 h-4 text-[#003D82]" />
                    <span className="[font-family:'Lexend',Helvetica] text-sm text-gray-700">
                      {result.duration.text}
                    </span>
                  </div>
                )}
              </div>

              <LocationInput
                value={location.address}
                onChange={(value) =>
                  updateLocation(dayIndex, locationIndex, 'address', value)
                }
                placeholder="Next location address"
                onLocationSelect={(address) =>
                  updateLocation(dayIndex, locationIndex, 'address', address)
                }
              />
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                  Setup required?
                </span>
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name={`setup-${dayIndex}-${locationIndex}`}
                    checked={location.requiresSetup === true}
                    onChange={() =>
                      updateLocation(dayIndex, locationIndex, 'requiresSetup', true)
                    }
                    className="w-4 h-4"
                  />
                  <span className="[font-family:'Lexend',Helvetica] text-sm">
                    Yes
                  </span>
                </label>
                <label className="flex items-center gap-2">
                  <input
                    type="radio"
                    name={`setup-${dayIndex}-${locationIndex}`}
                    checked={location.requiresSetup === false}
                    onChange={() =>
                      updateLocation(dayIndex, locationIndex, 'requiresSetup', false)
                    }
                    className="w-4 h-4"
                  />
                  <span className="[font-family:'Lexend',Helvetica] text-sm">
                    No
                  </span>
                </label>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
</file>

<file path="supabase/functions/send-quote-email/index.ts">
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Client-Info, Apikey",
};

interface EmailRequest {
  to: string;
  clientName: string;
  quoteData: {
    clientName: string;
    clientEmail: string;
    clientPhone: string;
    projectStartDate: string;
    projectEndDate: string;
    filmingHours: number;
    tier: string;
    revenue: number;
    status: string;
    createdAt: string;
  };
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const { to, clientName, quoteData }: EmailRequest = await req.json();

    if (!to || !clientName || !quoteData) {
      return new Response(
        JSON.stringify({ error: "Missing required fields" }),
        {
          status: 400,
          headers: {
            ...corsHeaders,
            "Content-Type": "application/json",
          },
        }
      );
    }

    const resendApiKey = Deno.env.get("RESEND_API_KEY");
    
    if (!resendApiKey) {
      console.error("RESEND_API_KEY not configured");
      return new Response(
        JSON.stringify({ 
          error: "Email service not configured",
          message: "Quote email simulation - in production, this would send an email to " + to 
        }),
        {
          status: 200,
          headers: {
            ...corsHeaders,
            "Content-Type": "application/json",
          },
        }
      );
    }

    const emailHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          @import url('https://fonts.googleapis.com/css2?family=Lexend:wght@400;500;600;700&display=swap');
          
          body {
            font-family: 'Lexend', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          
          .header {
            background: #003D82;
            color: white;
            padding: 30px;
            text-align: center;
            border-radius: 8px 8px 0 0;
          }
          
          .header h1 {
            margin: 0;
            font-size: 28px;
          }
          
          .content {
            background: #ffffff;
            padding: 30px;
            border: 1px solid #e5e7eb;
          }
          
          .section {
            margin-bottom: 25px;
          }
          
          .section-title {
            background: #E8EFF3;
            padding: 12px 15px;
            font-size: 16px;
            font-weight: 700;
            color: #003D82;
            margin-bottom: 15px;
            border-radius: 4px;
          }
          
          .info-row {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #e5e7eb;
          }
          
          .info-label {
            font-weight: 600;
            color: #6b7280;
          }
          
          .info-value {
            font-weight: 500;
            color: #111827;
          }
          
          .price-section {
            background: #E8EFF3;
            padding: 30px;
            text-align: center;
            margin: 30px 0;
            border-radius: 8px;
          }
          
          .price {
            font-size: 42px;
            font-weight: 700;
            color: #003D82;
            margin: 0;
          }
          
          .footer {
            text-align: center;
            padding: 20px;
            color: #6b7280;
            font-size: 14px;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Vid-QUO</h1>
          <p style="margin: 5px 0 0 0;">Your Video Production Quote</p>
        </div>
        
        <div class="content">
          <p>Dear ${quoteData.clientName},</p>
          <p>Thank you for your interest! Please find your video production quote details below:</p>
          
          <div class="section">
            <div class="section-title">Client Information</div>
            <div class="info-row">
              <span class="info-label">Name:</span>
              <span class="info-value">${quoteData.clientName}</span>
            </div>
            <div class="info-row">
              <span class="info-label">Email:</span>
              <span class="info-value">${quoteData.clientEmail}</span>
            </div>
            <div class="info-row">
              <span class="info-label">Phone:</span>
              <span class="info-value">${quoteData.clientPhone || 'N/A'}</span>
            </div>
          </div>
          
          <div class="section">
            <div class="section-title">Project Information</div>
            <div class="info-row">
              <span class="info-label">Start Date:</span>
              <span class="info-value">${quoteData.projectStartDate || 'N/A'}</span>
            </div>
            <div class="info-row">
              <span class="info-label">End Date:</span>
              <span class="info-value">${quoteData.projectEndDate || 'N/A'}</span>
            </div>
            <div class="info-row">
              <span class="info-label">Filming Hours:</span>
              <span class="info-value">${quoteData.filmingHours || 0} hours</span>
            </div>
            <div class="info-row">
              <span class="info-label">Tier:</span>
              <span class="info-value">${quoteData.tier || 'Standard'}</span>
            </div>
          </div>
          
          <div class="price-section">
            <div class="price">$${quoteData.revenue?.toLocaleString() || '0'}</div>
            <p style="margin: 10px 0 0 0; color: #6b7280;">Total Quote Amount</p>
          </div>
          
          <div class="section">
            <div class="info-row">
              <span class="info-label">Quote Created:</span>
              <span class="info-value">${new Date(quoteData.createdAt).toLocaleDateString()}</span>
            </div>
            <div class="info-row">
              <span class="info-label">Status:</span>
              <span class="info-value">${quoteData.status}</span>
            </div>
          </div>
          
          <p style="margin-top: 30px;">If you have any questions or would like to discuss this quote further, please don't hesitate to contact us.</p>
          
          <p>Best regards,<br>The Vid-QUO Team</p>
        </div>
        
        <div class="footer">
          <p>This is an automated email from Vid-QUO. Please do not reply directly to this email.</p>
        </div>
      </body>
      </html>
    `;

    const emailText = `
Dear ${quoteData.clientName},

Thank you for your interest! Please find your video production quote details below:

Client Information:
- Name: ${quoteData.clientName}
- Email: ${quoteData.clientEmail}
- Phone: ${quoteData.clientPhone || 'N/A'}

Project Information:
- Start Date: ${quoteData.projectStartDate || 'N/A'}
- End Date: ${quoteData.projectEndDate || 'N/A'}
- Filming Hours: ${quoteData.filmingHours || 0} hours
- Tier: ${quoteData.tier || 'Standard'}

Total Quote Amount: $${quoteData.revenue?.toLocaleString() || '0'}

Quote Created: ${new Date(quoteData.createdAt).toLocaleDateString()}
Status: ${quoteData.status}

If you have any questions or would like to discuss this quote further, please don't hesitate to contact us.

Best regards,
The Vid-QUO Team
    `;

    const resendResponse = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${resendApiKey}`,
      },
      body: JSON.stringify({
        from: "Vid-QUO <onboarding@resend.dev>",
        to: [to],
        subject: `Your Video Production Quote - ${clientName}`,
        html: emailHtml,
        text: emailText,
      }),
    });

    if (!resendResponse.ok) {
      const errorData = await resendResponse.text();
      console.error("Resend API error:", errorData);
      
      return new Response(
        JSON.stringify({ 
          error: "Failed to send email",
          details: errorData 
        }),
        {
          status: resendResponse.status,
          headers: {
            ...corsHeaders,
            "Content-Type": "application/json",
          },
        }
      );
    }

    const result = await resendResponse.json();

    return new Response(
      JSON.stringify({ 
        success: true,
        message: "Email sent successfully",
        emailId: result.id 
      }),
      {
        status: 200,
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      }
    );
  } catch (error) {
    console.error("Error in send-quote-email function:", error);
    
    return new Response(
      JSON.stringify({ 
        error: "Internal server error",
        message: error instanceof Error ? error.message : "Unknown error" 
      }),
      {
        status: 500,
        headers: {
          ...corsHeaders,
          "Content-Type": "application/json",
        },
      }
    );
  }
});
</file>

<file path="supabase/migrations/20251012000000_initial_complete_schema.sql">
/*
  # Complete Database Schema for Vid-QUO Quote Management System

  ## Overview
  This migration creates the complete database schema for a video production quote
  management system with role-based access control, user settings, and comprehensive
  quote tracking.

  ## Tables Created

  ### 1. profiles
  User profiles with role-based access (superadmin and admin roles)
  - `id` (uuid, primary key, references auth.users)
  - `email` (text, unique, required)
  - `full_name` (text, nullable)
  - `role` (text, either 'superadmin' or 'admin')
  - `created_at` (timestamptz)
  - `updated_at` (timestamptz)

  ### 2. quotes
  Main quotes table storing all quote information
  - `id` (uuid, primary key)
  - `client_id` (uuid, references profiles)
  - `client_name` (text, required)
  - `client_email` (text, required)
  - `client_phone` (text, nullable)
  - `production_company` (text, nullable)
  - `project_start_date` (date, nullable)
  - `project_end_date` (date, nullable)
  - `tier` (text, standard/premium, nullable)
  - `status` (text, draft/done/exported/emailed/downloaded)
  - `filming_hours` (numeric, defaults to 0)
  - `revenue` (numeric, defaults to 0)
  - `is_accepted` (boolean, defaults to false)
  - `accepted_at` (timestamptz, nullable)
  - `form_data` (jsonb, stores complete form state)
  - `pickup_address` (text, nullable)
  - `dropoff_address` (text, nullable)
  - `pickup_lat` (numeric, nullable)
  - `pickup_lng` (numeric, nullable)
  - `dropoff_lat` (numeric, nullable)
  - `dropoff_lng` (numeric, nullable)
  - `distance_miles` (numeric, nullable)
  - `distance_km` (numeric, nullable)
  - `travel_duration_minutes` (integer, nullable)
  - `created_at` (timestamptz)
  - `updated_at` (timestamptz)

  ### 3. user_settings
  User-specific settings for crew rates and fees
  - `id` (uuid, primary key)
  - `user_id` (uuid, references auth.users, unique)
  - `director_of_photography_rate` (numeric, defaults to 0)
  - `editor_rate` (numeric, defaults to 0)
  - `producer_rate` (numeric, defaults to 0)
  - `enablement_content_owner_rate` (numeric, defaults to 0)
  - `creative_director_rate` (numeric, defaults to 0)
  - `set_designer_rate` (numeric, defaults to 0)
  - `company_name` (text, defaults to empty string)
  - `phone_number` (text, defaults to empty string)
  - `rush_fee` (numeric, defaults to 0)
  - `high_traffic_fee` (numeric, defaults to 0)
  - `created_at` (timestamptz)
  - `updated_at` (timestamptz)

  ### 4. dashboard_stats
  Dashboard metrics for analytics
  - `id` (uuid, primary key)
  - `user_id` (uuid, references profiles, unique)
  - `total_clients` (integer, defaults to 0)
  - `total_revenue` (numeric, defaults to 0)
  - `total_quotes` (integer, defaults to 0)
  - `clients_change_percent` (numeric, defaults to 0)
  - `revenue_change_percent` (numeric, defaults to 0)
  - `quotes_change_percent` (numeric, defaults to 0)
  - `updated_at` (timestamptz)

  ## Security
  - RLS enabled on all tables
  - Users (admin role) can only access their own data
  - Superadmins can access all data across all accounts
  - Service role can insert profiles for new user signups
  - Automatic profile creation on user signup via trigger

  ## Functions
  - `handle_new_user()` - Automatically creates profile when user signs up
  - `update_updated_at_column()` - Automatically updates updated_at timestamp

  ## Triggers
  - Auto-create profile on user signup
  - Auto-update timestamps on all tables when records are modified
*/

-- ============================================================================
-- PROFILES TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text UNIQUE NOT NULL,
  full_name text,
  role text NOT NULL DEFAULT 'admin' CHECK (role IN ('superadmin', 'admin')),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Users can view their own profile
CREATE POLICY "Users can view own profile"
  ON profiles FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  TO authenticated
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Users can insert their own profile
CREATE POLICY "Users can insert own profile"
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

-- Superadmins can view all profiles
CREATE POLICY "Superadmins can view all profiles"
  ON profiles FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles p
      WHERE p.id = auth.uid()
      AND p.role = 'superadmin'
    )
  );

-- Superadmins can update all profiles
CREATE POLICY "Superadmins can update all profiles"
  ON profiles FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles p
      WHERE p.id = auth.uid()
      AND p.role = 'superadmin'
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles p
      WHERE p.id = auth.uid()
      AND p.role = 'superadmin'
    )
  );

-- Service role can insert profiles (for automatic profile creation)
CREATE POLICY "Service role can insert profiles"
  ON profiles FOR INSERT
  TO service_role
  WITH CHECK (true);

-- ============================================================================
-- QUOTES TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS quotes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  client_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
  client_name text NOT NULL,
  client_email text NOT NULL,
  client_phone text,
  production_company text,
  project_start_date date,
  project_end_date date,
  tier text CHECK (tier IN ('standard', 'premium')),
  status text DEFAULT 'draft' CHECK (status IN ('draft', 'done', 'exported', 'emailed', 'downloaded')),
  filming_hours numeric DEFAULT 0,
  revenue numeric DEFAULT 0,
  is_accepted boolean DEFAULT false,
  accepted_at timestamptz,
  form_data jsonb,
  pickup_address text,
  dropoff_address text,
  pickup_lat numeric,
  pickup_lng numeric,
  dropoff_lat numeric,
  dropoff_lng numeric,
  distance_miles numeric,
  distance_km numeric,
  travel_duration_minutes integer,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE quotes ENABLE ROW LEVEL SECURITY;

-- Users can view their own quotes
CREATE POLICY "Users can view own quotes"
  ON quotes FOR SELECT
  TO authenticated
  USING (auth.uid() = client_id);

-- Users can insert their own quotes
CREATE POLICY "Users can insert own quotes"
  ON quotes FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = client_id);

-- Users can update their own quotes
CREATE POLICY "Users can update own quotes"
  ON quotes FOR UPDATE
  TO authenticated
  USING (auth.uid() = client_id)
  WITH CHECK (auth.uid() = client_id);

-- Users can delete their own quotes
CREATE POLICY "Users can delete own quotes"
  ON quotes FOR DELETE
  TO authenticated
  USING (auth.uid() = client_id);

-- Superadmins can view all quotes
CREATE POLICY "Superadmins can view all quotes"
  ON quotes FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = auth.uid()
      AND profiles.role = 'superadmin'
    )
  );

-- Superadmins can update all quotes
CREATE POLICY "Superadmins can update all quotes"
  ON quotes FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = auth.uid()
      AND profiles.role = 'superadmin'
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = auth.uid()
      AND profiles.role = 'superadmin'
    )
  );

-- Superadmins can delete all quotes
CREATE POLICY "Superadmins can delete all quotes"
  ON quotes FOR DELETE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE profiles.id = auth.uid()
      AND profiles.role = 'superadmin'
    )
  );

-- ============================================================================
-- USER SETTINGS TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS user_settings (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL UNIQUE,
  director_of_photography_rate numeric DEFAULT 0,
  editor_rate numeric DEFAULT 0,
  producer_rate numeric DEFAULT 0,
  enablement_content_owner_rate numeric DEFAULT 0,
  creative_director_rate numeric DEFAULT 0,
  set_designer_rate numeric DEFAULT 0,
  company_name text DEFAULT '',
  phone_number text DEFAULT '',
  rush_fee numeric DEFAULT 0,
  high_traffic_fee numeric DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE user_settings ENABLE ROW LEVEL SECURITY;

-- Users can view their own settings
CREATE POLICY "Users can view own settings"
  ON user_settings FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Users can insert their own settings
CREATE POLICY "Users can insert own settings"
  ON user_settings FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Users can update their own settings
CREATE POLICY "Users can update own settings"
  ON user_settings FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- DASHBOARD STATS TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS dashboard_stats (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE REFERENCES profiles(id) ON DELETE CASCADE,
  total_clients integer DEFAULT 0,
  total_revenue numeric DEFAULT 0,
  total_quotes integer DEFAULT 0,
  clients_change_percent numeric DEFAULT 0,
  revenue_change_percent numeric DEFAULT 0,
  quotes_change_percent numeric DEFAULT 0,
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE dashboard_stats ENABLE ROW LEVEL SECURITY;

-- Users can view their own stats
CREATE POLICY "Users can view own stats"
  ON dashboard_stats FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Users can insert their own stats
CREATE POLICY "Users can insert own stats"
  ON dashboard_stats FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Users can update their own stats
CREATE POLICY "Users can update own stats"
  ON dashboard_stats FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- ============================================================================
-- FUNCTIONS
-- ============================================================================

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to automatically create profile on user signup
CREATE OR REPLACE FUNCTION handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name, role)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'full_name', ''),
    COALESCE(NEW.raw_user_meta_data->>'role', 'admin')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================================
-- TRIGGERS
-- ============================================================================

-- Trigger to automatically create profile when user signs up
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION handle_new_user();

-- Triggers to automatically update updated_at timestamps
CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_quotes_updated_at
  BEFORE UPDATE ON quotes
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_settings_updated_at
  BEFORE UPDATE ON user_settings
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_dashboard_stats_updated_at
  BEFORE UPDATE ON dashboard_stats
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
</file>

<file path="GOOGLE_MAPS_SETUP.md">
# Google Maps API Setup Guide

This guide will help you configure your Google Maps API key to work with both local development and Netlify production environments.

## Table of Contents

- [Quick Start](#quick-start)
- [Problem](#problem)
- [Solution](#solution)
- [Step 1: Enable Required APIs](#step-1-enable-required-apis)
- [Step 2: Configure API Key Restrictions](#step-2-configure-api-key-restrictions)
- [Step 3: Update Your Environment Variables](#step-3-update-your-environment-variables)
  - [For Local Development](#for-local-development)
  - [For Netlify Deployment](#for-netlify-deployment)
- [Step 4: Test Your Setup](#step-4-test-your-setup)
- [Troubleshooting](#troubleshooting)
- [Development vs Production](#development-vs-production)
- [Netlify-Specific Testing and Verification](#netlify-specific-testing-and-verification)
- [Best Practices](#best-practices)
- [Quick Reference Checklist](#quick-reference-checklist)
- [Continuous Deployment Notes](#continuous-deployment-notes)
- [Additional Resources](#additional-resources)
- [Support](#support)

## Quick Start

For the impatient, here's the fastest way to get Google Maps working on both local and Netlify:

1. **Enable APIs:** Go to [Google Cloud Console](https://console.cloud.google.com/apis/library) and enable: Maps JavaScript API, Places API, Distance Matrix API, and Geocoding API

2. **Configure Referrers:** In [API Credentials](https://console.cloud.google.com/apis/credentials), add these HTTP referrers:
   ```
   http://localhost:*
   https://vidquo.netlify.app/*
   https://deploy-preview-*--vidquo.netlify.app/*
   https://*--vidquo.netlify.app/*
   ```

3. **Local Setup:** Add to `.env` file:
   ```
   VITE_GOOGLE_MAPS_API_KEY=your_api_key_here
   ```

4. **Netlify Setup:** Add environment variable in [Netlify UI](https://app.netlify.com/sites/vidquo/configuration/env):
   - Key: `VITE_GOOGLE_MAPS_API_KEY`
   - Value: Your API key
   - Scope: Builds

5. **Deploy:** Push to Git or trigger a manual deploy in Netlify

6. **Verify:** Test on both `localhost` and `vidquo.netlify.app`

For detailed instructions, continue reading below.

## Problem

The Google Maps API may work in some environments but fail locally due to:
- API key restrictions blocking localhost
- Missing required APIs
- CORS restrictions when using REST endpoints directly

## Solution

We've updated the application to use the Google Maps JavaScript SDK exclusively, which eliminates CORS issues. However, you still need to configure your API key properly.

## Step 1: Enable Required APIs

Go to the [Google Cloud Console](https://console.cloud.google.com/) and enable these APIs:

1. **Maps JavaScript API** - Required for the core SDK
2. **Places API** - Required for address autocomplete
3. **Distance Matrix API** - Required for distance calculations
4. **Geocoding API** - Required for address-to-coordinates conversion

### How to enable APIs:
1. Navigate to "APIs & Services" > "Library"
2. Search for each API name above
3. Click on it and press "Enable"

## Step 2: Configure API Key Restrictions

### Application Restrictions

1. Go to [API Credentials](https://console.cloud.google.com/apis/credentials)
2. Click on your API key
3. Under "Application restrictions", select **"HTTP referrers (web sites)"**
4. Add these referrer URLs:

```
http://localhost:*
http://127.0.0.1:*
https://vidquo.netlify.app/*
https://deploy-preview-*--vidquo.netlify.app/*
https://*--vidquo.netlify.app/*
```

**Explanation:**
- `http://localhost:*` - For local development
- `http://127.0.0.1:*` - Alternative localhost address
- `https://vidquo.netlify.app/*` - Production Netlify site
- `https://deploy-preview-*--vidquo.netlify.app/*` - Netlify deploy previews for pull requests
- `https://*--vidquo.netlify.app/*` - Netlify branch deploys (e.g., `https://dev--vidquo.netlify.app/`)

### API Restrictions

1. In the same API key settings page
2. Under "API restrictions", select **"Restrict key"**
3. Select only the APIs you're using:
   - Maps JavaScript API
   - Places API
   - Distance Matrix API
   - Geocoding API

## Step 3: Update Your Environment Variables

### For Local Development

Ensure your `.env` file has the correct API key:

```env
VITE_GOOGLE_MAPS_API_KEY=your_actual_api_key_here
```

**Important:**
- Never commit your `.env` file to version control
- Use the `VITE_` prefix for all Vite environment variables
- Restart your dev server after changing environment variables

### For Netlify Deployment

You must configure the API key in Netlify's dashboard for production and preview deployments.

**Option 1: Using Netlify UI (Recommended)**

1. Go to your [Netlify site dashboard](https://app.netlify.com/sites/vidquo/configuration/env)
2. Navigate to **Site configuration > Environment variables**
3. Click **Add a variable** or **Add variable**
4. Set the following:
   - **Key:** `VITE_GOOGLE_MAPS_API_KEY`
   - **Values:** Your Google Maps API key
   - **Scopes:** Select **Builds** (required for Vite to access during build time)
   - **Deploy contexts:** Choose the contexts where you want the key available:
     - **Production** - For main site deployment
     - **Deploy Previews** - For pull request previews
     - **Branch deploys** - For specific branch deployments
5. Click **Create variable** or **Save**

**Option 2: Using Netlify CLI**

```bash
# Install Netlify CLI if not already installed
npm install -g netlify-cli

# Login to Netlify
netlify login

# Link to your site (if not already linked)
netlify link

# Set environment variable
netlify env:set VITE_GOOGLE_MAPS_API_KEY "your_actual_api_key_here"

# Or import from your local .env file
netlify env:import .env
```

**Option 3: Using netlify.toml Configuration File**

Create a `netlify.toml` file in your project root:

```toml
[build]
  command = "npm run build"
  publish = "dist"

# Note: For sensitive values like API keys, use Netlify UI instead
# This is only for demonstration - DO NOT commit API keys to version control
[context.production.environment]
  # VITE_GOOGLE_MAPS_API_KEY = "set_this_in_netlify_ui"

[context.deploy-preview.environment]
  # VITE_GOOGLE_MAPS_API_KEY = "set_this_in_netlify_ui"
```

**Security Note:** While you can set environment variables in `netlify.toml`, it's NOT recommended for sensitive values like API keys since this file is committed to version control. Always use the Netlify UI or CLI for sensitive values.

**Important Notes:**
- Environment variable changes require a new build and deploy to take effect
- Netlify does NOT read `.env` files during build - you must set variables in Netlify's dashboard or CLI
- The `VITE_` prefix makes the variable available to client-side code during build time
- After adding or changing variables, trigger a new deploy from the Netlify dashboard or push new code

## Step 4: Test Your Setup

### In Browser Console

Open your browser's developer console (F12) and look for logs starting with:
- `[useGoogleMaps]` - Script loading status
- `[LocationInput]` - Autocomplete functionality
- `[Distance Calculation]` - Distance matrix calculations

### Expected Flow

1. You should see: `[useGoogleMaps] Google Maps loaded successfully`
2. When typing in address fields: `[LocationInput] Autocomplete status: OK predictions: X`
3. When calculating distance: `[Distance Calculation] Success: {...}`

### Common Errors

#### "RefererNotAllowedMapError"
- Your localhost/domain is not in the HTTP referrers list
- Solution: Add `http://localhost:*` to referrers

#### "ApiNotActivatedMapError"
- Required API is not enabled in Google Cloud Console
- Solution: Enable all required APIs listed in Step 1

#### "Google Maps not loaded"
- Script failed to load or API key is invalid
- Solution: Check browser console for specific error, verify API key

#### "REQUEST_DENIED"
- API restrictions are too strict or API not enabled
- Solution: Check API restrictions and ensure all required APIs are enabled

## Troubleshooting

### Clear browser cache
Sometimes old scripts are cached. Try:
1. Hard refresh: Ctrl+Shift+R (Windows/Linux) or Cmd+Shift+R (Mac)
2. Clear browser cache and reload

### Check Network Tab
1. Open DevTools > Network tab
2. Filter by "maps.googleapis.com"
3. Check if script loads successfully (200 status)
4. Check API calls for error responses

### Verify API Key
Test your API key directly:
```
https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places
```

If this loads without errors in your browser, the key is valid.

## Development vs Production

### Development (Local)
- Uses `http://localhost:5173` (Vite default)
- Referrer: `http://localhost:*`
- Environment variables from `.env` file
- Console logs are enabled for debugging

### Production (Netlify)
- Production URL: `https://vidquo.netlify.app`
- Deploy Preview URLs: `https://deploy-preview-*--vidquo.netlify.app`
- Branch Deploy URLs: `https://*--vidquo.netlify.app`
- Referrers configured in Google Cloud Console
- Environment variables from Netlify dashboard
- Consider disabling detailed console logs for performance

### Key Differences

| Aspect | Local Development | Netlify Production |
|--------|------------------|-------------------|
| Environment Variables | Read from `.env` file | Set in Netlify dashboard |
| URL | `localhost:5173` | `vidquo.netlify.app` |
| Build Process | `npm run dev` | `npm run build` (automated) |
| API Key Source | Local `.env` | Netlify environment variables |
| Deployment | Manual restart | Automatic on git push |

## Netlify-Specific Testing and Verification

### Verifying Environment Variables in Netlify

After setting up your environment variables, verify they're correctly configured:

1. **Check Build Logs:**
   - Go to your [Netlify deploys dashboard](https://app.netlify.com/sites/vidquo/deploys)
   - Click on the latest deploy
   - Look for any environment variable related errors in the build log
   - Vite will show warnings if environment variables are missing

2. **Test in Deploy Preview:**
   - Create a pull request or branch
   - Netlify will automatically create a deploy preview
   - Test Google Maps functionality in the preview URL before merging to production
   - Check browser console for any API key errors

3. **Verify in Production:**
   - After deploying to production, visit `https://vidquo.netlify.app`
   - Open browser DevTools (F12) and check the Console tab
   - Look for `[useGoogleMaps] Google Maps loaded successfully`
   - Test address autocomplete and distance calculations

4. **Check Network Requests:**
   - Open DevTools > Network tab
   - Filter by "maps.googleapis.com"
   - Verify requests return 200 status codes
   - If you see 403 errors, check your HTTP referrer configuration

### Triggering a Rebuild After Environment Variable Changes

If you add or modify environment variables in Netlify:

1. **Option 1: Via Netlify UI**
   - Go to [Deploys](https://app.netlify.com/sites/vidquo/deploys)
   - Click **Trigger deploy > Deploy site**
   - Wait for build to complete

2. **Option 2: Via Git Push**
   - Make any small change to your repository
   - Commit and push to trigger automatic deployment

3. **Option 3: Via Netlify CLI**
   ```bash
   netlify deploy --prod
   ```

### Common Netlify Deployment Issues

#### Issue: "API key is undefined in production"
**Symptoms:** Google Maps works locally but not on Netlify
**Solution:**
1. Verify the environment variable is set in Netlify UI with the exact name: `VITE_GOOGLE_MAPS_API_KEY`
2. Ensure the **Builds** scope is selected
3. Check that the variable is available in the correct deploy context (Production/Deploy Preview)
4. Trigger a new deploy after setting the variable

#### Issue: "RefererNotAllowedMapError on Netlify"
**Symptoms:** Maps API rejects requests from Netlify URLs
**Solution:**
1. Go to [Google Cloud Console API Credentials](https://console.cloud.google.com/apis/credentials)
2. Add these referrers:
   - `https://vidquo.netlify.app/*`
   - `https://deploy-preview-*--vidquo.netlify.app/*`
   - `https://*--vidquo.netlify.app/*`
3. Save and wait a few minutes for changes to propagate

#### Issue: "Build succeeds but maps don't load"
**Symptoms:** No console errors, but maps don't initialize
**Solution:**
1. Check if the API key is actually being injected: look for it in browser console
2. Verify all required Google Maps APIs are enabled (Maps JavaScript API, Places API, Distance Matrix API, Geocoding API)
3. Check browser Network tab for failed API requests
4. Ensure your Google Cloud project has billing enabled

#### Issue: "Environment variable not found during build"
**Symptoms:** Build logs show `undefined` for the API key
**Solution:**
1. Verify the variable name has the `VITE_` prefix
2. Check that variable is available in the Build scope
3. Ensure you're checking the correct deploy context
4. List environment variables via CLI: `netlify env:list`

## Best Practices

### For Local Development
1. **Keep `.env` file local** - Never commit it to version control
2. **Use `.env.example`** - Create a template file with placeholder values for team members
3. **Add to `.gitignore`** - Ensure `.env` is listed in your `.gitignore` file

### For Netlify Production
1. **Use separate API keys** for development and production environments
2. **Enable "Contains secret values"** - Mark sensitive variables as secrets in Netlify UI for additional protection
3. **Set quotas** to prevent unexpected charges in Google Cloud Console
4. **Monitor usage** in Google Cloud Console to track API calls and costs
5. **Rotate keys** periodically for security (update in both Google Cloud and Netlify)
6. **Use Deploy Contexts** - Set different API keys for production vs deploy previews if needed
7. **Document your setup** - Keep team members informed about which environments use which keys

### Security Recommendations
1. **HTTP Referrer Restrictions:** Always configure HTTP referrers in Google Cloud Console - never use unrestricted keys
2. **API Restrictions:** Limit the key to only the APIs you're actually using
3. **Netlify Secrets Controller:** For enhanced security, mark variables as secrets in Netlify
4. **Regular Audits:** Review Google Cloud Console usage logs periodically
5. **Key Rotation:** Update API keys every 3-6 months and immediately if compromised

## Quick Reference Checklist

### Initial Setup Checklist

- [ ] Enable all required Google Maps APIs in Google Cloud Console
  - [ ] Maps JavaScript API
  - [ ] Places API
  - [ ] Distance Matrix API
  - [ ] Geocoding API
- [ ] Configure HTTP referrers in Google Cloud Console
  - [ ] `http://localhost:*`
  - [ ] `http://127.0.0.1:*`
  - [ ] `https://vidquo.netlify.app/*`
  - [ ] `https://deploy-preview-*--vidquo.netlify.app/*`
  - [ ] `https://*--vidquo.netlify.app/*`
- [ ] Set API restrictions to only required APIs
- [ ] Add `VITE_GOOGLE_MAPS_API_KEY` to local `.env` file
- [ ] Add `VITE_GOOGLE_MAPS_API_KEY` to Netlify environment variables
  - [ ] Set scope to **Builds**
  - [ ] Configure for appropriate deploy contexts
- [ ] Test locally with `npm run dev`
- [ ] Deploy to Netlify and test in production
- [ ] Verify in deploy preview before production release

### Deployment Verification Checklist

When deploying to Netlify, verify:

- [ ] Environment variable is set in Netlify dashboard
- [ ] Variable name is exactly `VITE_GOOGLE_MAPS_API_KEY` (with VITE_ prefix)
- [ ] Builds scope is selected
- [ ] New deploy is triggered after setting variables
- [ ] Build logs show no environment variable errors
- [ ] Production site loads Google Maps successfully
- [ ] Address autocomplete works
- [ ] Distance calculation works
- [ ] No console errors related to API key or referrers

## Continuous Deployment Notes

### How Netlify Continuous Deployment Works with Google Maps

1. **On Git Push:** Netlify automatically detects changes and starts a build
2. **Build Process:** During `npm run build`, Vite injects environment variables (including `VITE_GOOGLE_MAPS_API_KEY`) into the client bundle
3. **Deploy:** Built files are deployed to Netlify CDN
4. **Runtime:** When users visit the site, the API key is already embedded in the JavaScript bundle

**Important:** The API key is embedded at build time, not runtime. This means:
- Changes to environment variables require a rebuild
- The key will be visible in the client-side JavaScript (which is why HTTP referrer restrictions are critical)
- You cannot change the key without triggering a new deployment

### When to Trigger Manual Deploys

You need to manually trigger a deploy when:
- Adding or updating environment variables in Netlify
- Changing API key restrictions in Google Cloud Console
- Rotating API keys for security
- Troubleshooting environment variable issues

**How to trigger:**
```bash
# Via Netlify CLI
netlify deploy --prod

# Or via Netlify UI
# Go to Deploys > Trigger deploy > Deploy site
```

## Additional Resources

### Helpful CLI Commands

```bash
# List all environment variables for your site
netlify env:list

# Set a new environment variable
netlify env:set VITE_GOOGLE_MAPS_API_KEY "your_api_key"

# Import variables from .env file
netlify env:import .env

# Get the value of a specific variable (careful with sensitive data)
netlify env:get VITE_GOOGLE_MAPS_API_KEY

# Unset a variable
netlify env:unset VITE_GOOGLE_MAPS_API_KEY

# Check site status
netlify status

# View recent deploys
netlify deploy --list
```

### Quick Links

**Netlify:**
- [Vidquo Site Dashboard](https://app.netlify.com/sites/vidquo)
- [Environment Variables Settings](https://app.netlify.com/sites/vidquo/configuration/env)
- [Deploy Dashboard](https://app.netlify.com/sites/vidquo/deploys)
- [Netlify Environment Variables Documentation](https://docs.netlify.com/environment-variables/get-started/)

**Google Cloud Console:**
- [API Credentials](https://console.cloud.google.com/apis/credentials)
- [API Library](https://console.cloud.google.com/apis/library)
- [API Usage Dashboard](https://console.cloud.google.com/apis/dashboard)
- [Billing](https://console.cloud.google.com/billing)

**Documentation:**
- [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript)
- [Places API](https://developers.google.com/maps/documentation/places/web-service)
- [Distance Matrix API](https://developers.google.com/maps/documentation/distance-matrix)
- [Geocoding API](https://developers.google.com/maps/documentation/geocoding)
- [Vite Environment Variables](https://vitejs.dev/guide/env-and-mode.html)

## Support

### Local Development Issues
1. Check the browser console for detailed error logs
2. Verify `.env` file exists and contains `VITE_GOOGLE_MAPS_API_KEY`
3. Restart dev server after changing environment variables
4. Confirm HTTP referrers include `http://localhost:*`

### Netlify Production Issues
1. Check build logs in [Netlify deploys dashboard](https://app.netlify.com/sites/vidquo/deploys)
2. Verify environment variable is set in [Netlify UI](https://app.netlify.com/sites/vidquo/configuration/env)
3. Confirm HTTP referrers include all Netlify URL patterns
4. Test in deploy preview before production
5. Check browser console on production site for specific errors

### Google Cloud Console Issues
1. Verify all required APIs are enabled
2. Check API key restrictions are not too strict
3. Confirm billing is enabled for your Google Cloud project
4. Review API usage quotas and limits
5. Check for any service outages on [Google Cloud Status](https://status.cloud.google.com/)

If issues persist, review the detailed troubleshooting sections above for specific error messages and solutions.
</file>

<file path="public/frame-87.svg">
<svg width="61" height="60" viewBox="0 0 61 60" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="61" height="60" rx="30" fill="#023C97"/>
<path d="M46.5 48V44C46.5 41.8783 45.6571 39.8434 44.1569 38.3431C42.6566 36.8429 40.6217 36 38.5 36H22.5C20.3783 36 18.3434 36.8429 16.8431 38.3431C15.3429 39.8434 14.5 41.8783 14.5 44V48M38.5 20C38.5 24.4183 34.9183 28 30.5 28C26.0817 28 22.5 24.4183 22.5 20C22.5 15.5817 26.0817 12 30.5 12C34.9183 12 38.5 15.5817 38.5 20Z" stroke="#D9D9D9" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="tailwind.css">
@tailwind components;
@tailwind utilities;

@layer components {
  .all-\[unset\] {
    all: unset;
  }
}

:root {
  --app-secondary: rgba(143, 196, 212, 1);
  --dark-blue: rgba(0, 61, 130, 1);
  --darker-blue: rgba(0, 61, 130, 1);
  --m3state-layerslightonsurfacevariantopacity-008: rgba(73, 69, 79, 0.08);
  --m3state-layerslightonsurfacevariantopacity-010: rgba(73, 69, 79, 0.1);
  --m3syslighton-surface-variant: rgba(73, 69, 79, 1);
  --white: rgba(251, 252, 252, 1);
}

:root {
  --animate-spin: spin 1s linear infinite;
}

.animate-fade-in {
  animation: fade-in 1s var(--animation-delay, 0s) ease forwards;
}

.animate-fade-up {
  animation: fade-up 1s var(--animation-delay, 0s) ease forwards;
}

.animate-marquee {
  animation: marquee var(--duration) infinite linear;
}

.animate-marquee-vertical {
  animation: marquee-vertical var(--duration) linear infinite;
}

.animate-shimmer {
  animation: shimmer 8s infinite;
}

.animate-spin {
  animation: var(--animate-spin);
}

@keyframes spin {
  to {
    transform: rotate(1turn);
  }
}

@keyframes image-glow {
  0% {
    opacity: 0;
    animation-timing-function: cubic-bezier(0.74, 0.25, 0.76, 1);
  }

  10% {
    opacity: 0.7;
    animation-timing-function: cubic-bezier(0.12, 0.01, 0.08, 0.99);
  }

  to {
    opacity: 0.4;
  }
}

@keyframes fade-in {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }

  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes fade-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes shimmer {
  0%,
  90%,
  to {
    background-position: calc(-100% - var(--shimmer-width)) 0;
  }

  30%,
  60% {
    background-position: calc(100% + var(--shimmer-width)) 0;
  }
}

@keyframes marquee {
  0% {
    transform: translate(0);
  }

  to {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

@keyframes marquee-vertical {
  0% {
    transform: translateY(0);
  }

  to {
    transform: translateY(calc(-100% - var(--gap)));
  }
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: transparent;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 210 100% 25.5%;
    --primary-foreground: 0 0% 100%;

    --secondary: 195 47% 69%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 100% 39.2%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: transparent;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}
</file>

<file path="src/components/ui/footer.tsx">
import React from "react";

interface FooterProps {
  bgColor?: string;
}

export const Footer: React.FC<FooterProps> = ({ bgColor = "bg-[#003D82]" }) => {
  const currentYear = new Date().getFullYear();

  return (
    <footer className={`${bgColor} py-8 px-8 mt-auto`}>
      <div className="max-w-7xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-6">
          <div>
            <h3 className="[font-family:'Lexend',Helvetica] font-bold text-white text-lg mb-3">
              About
            </h3>
            <p className="[font-family:'Lexend',Helvetica] text-white text-sm leading-relaxed">
              Professional video production quote management system
            </p>
          </div>

          <div>
            <h3 className="[font-family:'Lexend',Helvetica] font-bold text-white text-lg mb-3">
              Contact
            </h3>
            <div className="space-y-2">
              <p className="[font-family:'Lexend',Helvetica] text-white text-sm">
                Email: support@vidquo.com
              </p>
              <p className="[font-family:'Lexend',Helvetica] text-white text-sm">
                Phone: (555) 123-4567
              </p>
            </div>
          </div>

          <div>
            <h3 className="[font-family:'Lexend',Helvetica] font-bold text-white text-lg mb-3">
              Resources
            </h3>
            <div className="space-y-2">
              <a
                href="#"
                className="[font-family:'Lexend',Helvetica] text-white text-sm hover:text-white/80 transition-colors block"
              >
                Help Center
              </a>
              <a
                href="#"
                className="[font-family:'Lexend',Helvetica] text-white text-sm hover:text-white/80 transition-colors block"
              >
                Privacy Policy
              </a>
              <a
                href="#"
                className="[font-family:'Lexend',Helvetica] text-white text-sm hover:text-white/80 transition-colors block"
              >
                Terms of Service
              </a>
            </div>
          </div>
        </div>

        <div className="border-t border-white/20 pt-6">
          <p className="[font-family:'Lexend',Helvetica] text-white text-sm text-center">
            {currentYear} VidQuo. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};
</file>

<file path="src/lib/exportUtils.ts">
import { Quote } from './supabase';

export const generateQuotePDF = (quote: Quote, formData?: any) => {
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert('Please allow popups to download PDF');
    return;
  }

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Quote - ${quote.client_name}</title>
      <style>
        @import url('https://fonts.googleapis.com/css2?family=Lexend:wght@400;500;600;700&display=swap');

        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }

        body {
          font-family: 'Lexend', sans-serif;
          padding: 40px;
          color: #333;
        }

        .header {
          background: #023c97;
          color: white;
          padding: 30px;
          margin-bottom: 30px;
        }

        .header h1 {
          font-size: 32px;
          margin-bottom: 10px;
        }

        .section {
          margin-bottom: 30px;
          page-break-inside: avoid;
        }

        .section-title {
          background: #d4e8ea;
          padding: 15px;
          font-size: 20px;
          font-weight: 700;
          color: #023c97;
          margin-bottom: 15px;
        }

        .info-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 15px;
          padding: 15px;
        }

        .info-row {
          display: flex;
          justify-content: space-between;
          padding: 10px 0;
          border-bottom: 1px solid #e5e7eb;
        }

        .info-label {
          font-weight: 600;
          color: #6b7280;
        }

        .info-value {
          font-weight: 500;
          color: #111827;
        }

        .price-section {
          background: #f3f4f6;
          padding: 30px;
          text-align: center;
          margin: 30px 0;
        }

        .price {
          font-size: 48px;
          font-weight: 700;
          color: #023c97;
        }

        @media print {
          body {
            padding: 20px;
          }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Vid-QUO</h1>
        <p>Video Production Quote</p>
      </div>

      <div class="section">
        <div class="section-title">Client Information</div>
        <div class="info-grid">
          <div class="info-row">
            <span class="info-label">Client Name:</span>
            <span class="info-value">${quote.client_name || 'N/A'}</span>
          </div>
          <div class="info-row">
            <span class="info-label">Email:</span>
            <span class="info-value">${quote.client_email || 'N/A'}</span>
          </div>
          <div class="info-row">
            <span class="info-label">Phone:</span>
            <span class="info-value">${quote.client_phone || 'N/A'}</span>
          </div>
          <div class="info-row">
            <span class="info-label">Client Phone:</span>
            <span class="info-value">${quote.client_phone || 'N/A'}</span>
          </div>
        </div>
      </div>

      <div class="section">
        <div class="section-title">Project Information</div>
        <div class="info-grid">
          <div class="info-row">
            <span class="info-label">Start Date:</span>
            <span class="info-value">${quote.project_start_date || 'N/A'}</span>
          </div>
          <div class="info-row">
            <span class="info-label">End Date:</span>
            <span class="info-value">${quote.project_end_date || 'N/A'}</span>
          </div>
          <div class="info-row">
            <span class="info-label">Filming Hours:</span>
            <span class="info-value">${quote.filming_hours || 0} hours</span>
          </div>
          <div class="info-row">
            <span class="info-label">Tier:</span>
            <span class="info-value">${quote.tier || 'N/A'}</span>
          </div>
        </div>
      </div>

      <div class="price-section">
        <div class="price">$${quote.revenue?.toLocaleString() || '0'}</div>
        <p style="margin-top: 10px; color: #6b7280;">Total Quote Amount</p>
      </div>

      <div class="section">
        <div class="info-row">
          <span class="info-label">Quote Created:</span>
          <span class="info-value">${new Date(quote.created_at).toLocaleDateString()}</span>
        </div>
        <div class="info-row">
          <span class="info-label">Status:</span>
          <span class="info-value">${quote.status}</span>
        </div>
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(htmlContent);
  printWindow.document.close();

  printWindow.onload = () => {
    setTimeout(() => {
      printWindow.focus();
      printWindow.print();

      setTimeout(() => {
        printWindow.close();
      }, 100);
    }, 500);
  };
};

export const generateQuoteExcel = (quote: Quote) => {
  const csvContent = [
    ['Quote Information'],
    [''],
    ['Client Name', quote.client_name],
    ['Email', quote.client_email],
    ['Phone', quote.client_phone || 'N/A'],
    ['Client Phone', quote.client_phone || 'N/A'],
    [''],
    ['Project Information'],
    ['Start Date', quote.project_start_date || 'N/A'],
    ['End Date', quote.project_end_date || 'N/A'],
    ['Filming Hours', quote.filming_hours?.toString() || '0'],
    ['Tier', quote.tier || 'N/A'],
    [''],
    ['Financial'],
    ['Revenue', `$${quote.revenue?.toLocaleString() || '0'}`],
    [''],
    ['Status', quote.status],
    ['Created', new Date(quote.created_at).toLocaleDateString()],
  ]
    .map(row => row.join(','))
    .join('\n');

  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);

  link.setAttribute('href', url);
  link.setAttribute('download', `quote-${quote.client_name}-${Date.now()}.csv`);
  link.style.visibility = 'hidden';

  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const sendQuoteEmail = async (quote: Quote) => {
  try {
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseAnonKey) {
      alert('Email service configuration error. Please contact support.');
      return;
    }

    const apiUrl = `${supabaseUrl}/functions/v1/send-quote-email`;

    const emailData = {
      to: quote.client_email,
      clientName: quote.client_name,
      quoteData: {
        clientName: quote.client_name,
        clientEmail: quote.client_email,
        clientPhone: quote.client_phone || 'N/A',
        projectStartDate: quote.project_start_date || 'N/A',
        projectEndDate: quote.project_end_date || 'N/A',
        filmingHours: quote.filming_hours || 0,
        tier: quote.tier || 'Standard',
        revenue: quote.revenue || 0,
        status: quote.status,
        createdAt: quote.created_at,
      },
    };

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}`,
      },
      body: JSON.stringify(emailData),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || 'Failed to send email');
    }

    if (result.success) {
      alert(`Email sent successfully to ${quote.client_email}`);
    } else if (result.message) {
      alert(result.message);
    }
  } catch (error) {
    console.error('Error sending email:', error);
    alert(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};
</file>

<file path="src/screens/Login/Login.tsx">
import React, { useState } from 'react';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Card } from '../../components/ui/card';
import { Footer } from '../../components/ui/footer';
import { useAuth } from '../../contexts/AuthContext';
import { User } from 'lucide-react';

export const Login = (): JSX.Element => {
  const { signIn, signUp } = useAuth();
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const [role, setRole] = useState<'superadmin' | 'admin'>('admin');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setLoading(true);

    if (isSignUp) {
      const { error } = await signUp(email, password, fullName, role);
      if (error) {
        setError(error.message || 'Failed to sign up');
        setLoading(false);
      } else {
        setSuccess('Account created successfully! Redirecting to dashboard...');
        setTimeout(() => {
          setLoading(false);
        }, 1000);
      }
    } else {
      const { error } = await signIn(email, password);
      if (error) {
        setError(error.message || 'Failed to sign in');
        setLoading(false);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#003D82] to-[#8FC4D4] flex flex-col">
      <div className="flex-1 flex items-center justify-center p-4">
      <Card className="w-full max-w-md bg-white rounded-2xl shadow-2xl p-8">
        <div className="mb-8 text-center">
          <div className="w-20 h-20 bg-[#003D82] rounded-full mx-auto mb-4 flex items-center justify-center">
            <User className="w-10 h-10 text-white" />
          </div>
          <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-3xl mb-2">
            {isSignUp ? 'Create Account' : 'Welcome Back'}
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-600">
            {isSignUp ? 'Sign up to get started' : 'Sign in to access your dashboard'}
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg [font-family:'Lexend',Helvetica] text-sm">
              {error}
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg [font-family:'Lexend',Helvetica] text-sm">
              {success}
            </div>
          )}

          {isSignUp && (
            <div>
              <Label className="[font-family:'Lexend',Helvetica] font-semibold text-gray-700 mb-2 block">
                Full Name
              </Label>
              <Input
                type="text"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                className="h-12 rounded-lg border-2 border-gray-300 focus:border-[#003D82] [font-family:'Lexend',Helvetica]"
                placeholder=""
                required
              />
            </div>
          )}

          <div>
            <Label className="[font-family:'Lexend',Helvetica] font-semibold text-gray-700 mb-2 block">
              Email Address
            </Label>
            <Input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="h-12 rounded-lg border-2 border-gray-300 focus:border-[#003D82] [font-family:'Lexend',Helvetica]"
              placeholder=""
              required
            />
          </div>

          <div>
            <Label className="[font-family:'Lexend',Helvetica] font-semibold text-gray-700 mb-2 block">
              Password
            </Label>
            <Input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="h-12 rounded-lg border-2 border-gray-300 focus:border-[#003D82] [font-family:'Lexend',Helvetica]"
              placeholder=""
              required
            />
          </div>

          {isSignUp && (
            <div>
              <Label className="[font-family:'Lexend',Helvetica] font-semibold text-gray-700 mb-2 block">
                Role
              </Label>
              <select
                value={role}
                onChange={(e) => setRole(e.target.value as 'superadmin' | 'admin')}
                className="w-full h-12 rounded-lg border-2 border-gray-300 focus:border-[#003D82] [font-family:'Lexend',Helvetica] px-4"
                required
              >
                <option value="admin">Admin</option>
                <option value="superadmin">Super Admin</option>
              </select>
            </div>
          )}

          <Button
            type="submit"
            disabled={loading}
            className="w-full h-12 bg-[#003D82] hover:bg-[#002A5C] text-white rounded-lg [font-family:'Lexend',Helvetica] font-bold text-lg"
          >
            {loading ? (isSignUp ? 'Creating Account...' : 'Signing in...') : (isSignUp ? 'Sign Up' : 'Sign In')}
          </Button>
        </form>

        <div className="mt-6 text-center">
          <p className="[font-family:'Lexend',Helvetica] text-gray-600 text-sm">
            {isSignUp ? 'Already have an account?' : "Don't have an account?"}{' '}
            <button
              onClick={() => {
                setIsSignUp(!isSignUp);
                setError('');
                setSuccess('');
              }}
              className="text-[#003D82] font-semibold hover:underline"
            >
              {isSignUp ? 'Sign In' : 'Sign Up'}
            </button>
          </p>
        </div>
      </Card>
      </div>

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="package.json">
{
  "version": "1.0.0",
  "source": "./index.html",
  "type": "module",
  "name": "vid-quo",
  "description": "",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@supabase/supabase-js": "^2.58.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "2.1.1",
    "lucide-react": "^0.453.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.1",
    "tailwind-merge": "2.5.4",
    "tailwindcss-animate": "1.0.7"
  },
  "devDependencies": {
    "@types/google.maps": "^3.58.1",
    "@types/react": "18.2.0",
    "@types/react-dom": "18.2.0",
    "@vitejs/plugin-react": "4.3.4",
    "esbuild": "0.24.0",
    "globals": "15.12.0",
    "tailwindcss": "3.4.16",
    "vite": "6.0.4"
  },
  "alias": {
    "@/*": "./src/components/ui/$1"
  }
}
</file>

<file path="src/components/EditQuoteModal.tsx">
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Dialog, DialogContent } from './ui/dialog';
import { Button } from './ui/button';
import { X } from 'lucide-react';

interface EditQuoteModalProps {
  quote: any;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess: () => void;
}

type QuotePackage = "Standard" | "Best Deal" | "Lifejacket";

export const EditQuoteModal: React.FC<EditQuoteModalProps> = ({
  quote,
  open,
  onOpenChange,
  onSuccess,
}) => {
  const navigate = useNavigate();
  const [selectedPackage, setSelectedPackage] = useState<QuotePackage>("Standard");

  const handleEditQuote = () => {
    onOpenChange(false);
    navigate(`/create-quote?edit=${quote.id}`);
  };

  const handleEmail = () => {
    alert("Email functionality will be implemented");
  };

  const handlePrint = () => {
    window.print();
  };

  const formData = quote?.form_data || {};
  const displayPrice = quote?.revenue || 0;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[95vw] md:w-[900px] max-h-[90vh] overflow-y-auto">
        <div className="relative">
          <button
            onClick={() => onOpenChange(false)}
            className="absolute -top-2 -right-2 p-2 hover:bg-gray-100 rounded-lg transition-colors z-10"
          >
            <X className="w-6 h-6" />
          </button>

          <div className="px-2 md:px-8 py-6">
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-8 gap-4">
              <div>
                <h2 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-2xl md:text-[32px]">
                  Quote Summary
                </h2>
                <p className="text-sm text-gray-600 [font-family:'Lexend',Helvetica] mt-1">
                  Quote ID: {quote?.id.slice(0, 8)}...
                </p>
              </div>
              <Button
                onClick={handleEditQuote}
                className="h-[50px] px-6 md:px-8 rounded-lg bg-[#f59e0b] hover:bg-[#d97706] [font-family:'Lexend',Helvetica] font-bold text-white text-lg md:text-xl w-full md:w-auto"
              >
                Edit Quote
              </Button>
            </div>

            <div className="bg-[#E8EFF3] rounded-xl p-4 md:p-8">
              <div className="flex flex-col md:flex-row items-center gap-3 md:gap-4 mb-8">
                <button
                  onClick={() => setSelectedPackage("Standard")}
                  className={`flex-1 w-full h-12 md:h-14 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-base md:text-lg transition-all ${
                    selectedPackage === "Standard"
                      ? "bg-[#003D82] text-white"
                      : "bg-[#a0b4b8] text-white hover:bg-[#90a4a8]"
                  }`}
                >
                  Standard
                </button>
                <button
                  onClick={() => setSelectedPackage("Best Deal")}
                  className={`flex-1 w-full h-12 md:h-14 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-base md:text-lg transition-all ${
                    selectedPackage === "Best Deal"
                      ? "bg-[#003D82] text-white"
                      : "bg-[#a0b4b8] text-white hover:bg-[#90a4a8]"
                  }`}
                >
                  Best Deal
                </button>
                <button
                  onClick={() => setSelectedPackage("Lifejacket")}
                  className={`flex-1 w-full h-12 md:h-14 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-base md:text-lg transition-all ${
                    selectedPackage === "Lifejacket"
                      ? "bg-[#003D82] text-white"
                      : "bg-[#a0b4b8] text-white hover:bg-[#90a4a8]"
                  }`}
                >
                  Lifejacket
                </button>
              </div>

              <div className="bg-white rounded-xl p-4 md:p-8 min-h-[400px] flex flex-col">
                <div className="mb-8">
                  <div className="inline-block bg-[#003D82] text-white px-4 md:px-6 py-2 rounded [font-family:'Lexend',Helvetica] font-bold text-base md:text-lg mb-8">
                    {selectedPackage} Quote
                  </div>
                </div>

                <div className="flex items-center justify-center flex-1">
                  <div className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-4xl md:text-[80px]">
                    ${displayPrice.toLocaleString()}
                  </div>
                </div>

                <div className="mt-8 space-y-3 md:space-y-4 text-gray-600 [font-family:'Lexend',Helvetica] text-sm md:text-base">
                  <div className="flex justify-between gap-4">
                    <span>Client Name:</span>
                    <span className="font-semibold text-right">{formData.fullName || quote?.client_name || "N/A"}</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Contact Email:</span>
                    <span className="font-semibold text-right break-all">{formData.contactEmail || quote?.client_email || "N/A"}</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Phone Number:</span>
                    <span className="font-semibold text-right">{formData.clientPhoneNumber || quote?.client_phone || "N/A"}</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Number of Deliverables:</span>
                    <span className="font-semibold">{formData.numberOfDeliverables || 0}</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Filming Days:</span>
                    <span className="font-semibold">{formData.filmingDays || 0}</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Crew per Setup:</span>
                    <span className="font-semibold">{formData.crewPerSetup || 0}</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Weight (Production/Profit):</span>
                    <span className="font-semibold">{formData.weight || 0}%</span>
                  </div>
                  <div className="flex justify-between gap-4">
                    <span>Discount:</span>
                    <span className="font-semibold">{formData.discount || 0}%</span>
                  </div>
                  <div className="flex justify-between gap-4 pt-4 border-t-2 border-gray-200">
                    <span className="font-bold text-[#003D82]">Status:</span>
                    <span className={`font-bold capitalize ${
                      quote?.status === 'accepted' ? 'text-green-600' :
                      quote?.status === 'pending' ? 'text-yellow-600' :
                      'text-gray-600'
                    }`}>{quote?.status || 'draft'}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="flex flex-col md:flex-row justify-end gap-3 md:gap-4 px-2 md:px-8 py-6 md:py-8 border-t border-gray-200">
            <Button
              onClick={handleEmail}
              className="h-[50px] px-6 md:px-8 rounded-lg bg-[#007c89] hover:bg-[#006670] [font-family:'Lexend',Helvetica] font-bold text-white text-lg md:text-xl w-full md:w-auto"
            >
              Email
            </Button>
            <Button
              onClick={handlePrint}
              className="h-[50px] px-6 md:px-8 rounded-lg bg-[#007c89] hover:bg-[#006670] [font-family:'Lexend',Helvetica] font-bold text-white text-lg md:text-xl w-full md:w-auto"
            >
              Print
            </Button>
            <Button
              onClick={() => onOpenChange(false)}
              className="h-[50px] px-6 md:px-8 rounded-lg bg-[#003D82] hover:bg-[#002A5C] [font-family:'Lexend',Helvetica] font-bold text-white text-lg md:text-xl w-full md:w-auto"
            >
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
</file>

<file path="src/screens/CreateQuote/components/StepSidebar.tsx">
import React from "react";
import { Check } from "lucide-react";
import { QuoteStep } from "../CreateQuote";

interface StepSidebarProps {
  currentStep: QuoteStep;
  onStepChange: (step: QuoteStep) => void;
  completedSubSteps?: Record<number, string[]>;
  isEditMode?: boolean;
}

interface SubStep {
  label: string;
}

interface Step {
  number: QuoteStep;
  title: string;
  subSteps?: SubStep[];
}

export const StepSidebar: React.FC<StepSidebarProps> = ({
  currentStep,
  onStepChange,
  completedSubSteps = {},
  isEditMode = false,
}) => {
  const steps: Step[] = [
    {
      number: 1,
      title: "Client Info",
    },
    {
      number: 2,
      title: "Project Info",
    },
    {
      number: 3,
      title: "Summary",
    },
  ];

  const isStepCompleted = (stepNumber: QuoteStep) => {
    return currentStep > stepNumber;
  };

  const isStepActive = (stepNumber: QuoteStep) => {
    return currentStep === stepNumber;
  };

  const isSubStepCompleted = (stepNumber: QuoteStep, subStepLabel: string) => {
    return completedSubSteps[stepNumber]?.includes(subStepLabel) || false;
  };

  return (
    <div className={`w-full lg:w-[280px] ${isEditMode ? 'bg-[#fed7aa]' : 'bg-[#E8EFF3]'} flex flex-col pt-8 lg:pt-16 px-4 lg:px-8`}>
      <h1 className="[font-family:'Lexend',Helvetica] font-bold text-black text-[32px] tracking-[0] leading-[1.2] mb-12">
        {isEditMode ? 'Edit Quote' : 'Create a New Quote'}
      </h1>

      <div className="space-y-4 relative">
        <div className={`absolute left-[17px] top-[30px] w-[6px] rounded-full ${isEditMode ? 'bg-[#f59e0b]' : 'bg-[#8FC4D4]'}`} style={{ height: 'calc(100% - 78px)' }}></div>

        {steps.map((step, index) => (
          <div key={step.number} className="relative">
            <div
              className="flex items-center gap-4 px-6 py-4 transition-all cursor-pointer relative ml-[50px]"
              onClick={() => {
                onStepChange(step.number);
              }}
            >
              <div
                className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 absolute -left-[56px] ${
                  isStepCompleted(step.number)
                    ? isEditMode ? "bg-[#f59e0b] text-white" : "bg-[#003D82] text-white"
                    : isStepActive(step.number)
                    ? isEditMode ? "bg-[#f59e0b] text-white" : "bg-[#003D82] text-white"
                    : isEditMode ? "bg-[#fb923c] text-white" : "bg-[#8FC4D4] text-white"
                }`}
              >
                {isStepCompleted(step.number) ? (
                  <Check className="w-5 h-5 stroke-[3]" />
                ) : (
                  <span className="[font-family:'Lexend',Helvetica] font-bold text-xl">
                    {step.number}
                  </span>
                )}
              </div>
              <span
                className={`[font-family:'Lexend',Helvetica] font-bold text-xl ${
                  isStepActive(step.number) || isStepCompleted(step.number)
                    ? isEditMode ? "text-[#f59e0b]" : "text-[#003D82]"
                    : isEditMode ? "text-[#fb923c]" : "text-[#8FC4D4]"
                }`}
              >
                {step.title}
              </span>
            </div>

            {step.subSteps && isStepActive(step.number) && (
              <div className="relative ml-[50px] mt-4 mb-2">
                {step.subSteps.length > 1 && (
                  <div
                    className={`absolute left-[11px] w-[2px] ${isEditMode ? 'bg-[#f59e0b]' : 'bg-[#003D82]'}`}
                    style={{
                      top: '8px',
                      height: `calc(100% - ${100 / step.subSteps.length}% - 8px)`
                    }}
                  ></div>
                )}

                <div className="space-y-4">
                  {step.subSteps.map((subStep, subIndex) => (
                    <div key={subIndex} className="flex items-start gap-3 pl-6">
                      <div className={`w-[16px] h-[16px] rounded-full ${isEditMode ? 'bg-[#f59e0b]' : 'bg-[#003D82]'} flex-shrink-0 flex items-center justify-center absolute left-[4px]`}>
                        {isSubStepCompleted(step.number, subStep.label) && (
                          <Check className="w-[10px] h-[10px] text-white stroke-[3]" />
                        )}
                      </div>
                      <span className={`[font-family:'Lexend',Helvetica] text-base leading-tight max-w-[140px] ${isEditMode ? 'text-[#f59e0b]' : 'text-[#003D82]'}`}>
                        {subStep.label}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};
</file>

<file path="src/screens/SuperAdminDashboard/SuperAdminAnalytics.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from '../../components/ui/button';
import { Card } from '../../components/ui/card';
import { Avatar } from '../../components/ui/avatar';
import { supabase, Quote } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { Users, DollarSign, FileText, TrendingUp, LogOut, User, Settings, HelpCircle, Activity, Target } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { getStatusColor, formatDate } from '../../lib/quoteUtils';
import { Footer } from '../../components/ui/footer';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

interface SystemStats {
  totalAccounts: number;
  totalQuotes: number;
  totalRevenue: number;
  quotesByStatus: {
    draft: number;
    done: number;
    exported: number;
    emailed: number;
  };
  recentQuotes: Quote[];
  topAccounts: Array<{
    id: string;
    name: string;
    quoteCount: number;
    totalRevenue: number;
  }>;
}

export const SuperAdminAnalytics = (): JSX.Element => {
  const { profile, signOut } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState<SystemStats | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchSystemStats();
  }, []);

  const fetchSystemStats = async () => {
    const { data: profilesData } = await supabase
      .from('profiles')
      .select('id, full_name')
      .eq('role', 'admin');

    const { data: quotesData } = await supabase
      .from('quotes')
      .select('*')
      .order('created_at', { ascending: false });

    if (profilesData && quotesData) {
      const totalRevenue = quotesData.reduce((sum, quote) => sum + (quote.total_amount || 0), 0);

      const quotesByStatus = {
        draft: quotesData.filter(q => q.status === 'draft').length,
        done: quotesData.filter(q => q.status === 'done').length,
        exported: quotesData.filter(q => q.status === 'exported').length,
        emailed: quotesData.filter(q => q.status === 'emailed').length,
      };

      const accountQuoteCounts = new Map<string, { count: number; revenue: number; name: string }>();

      quotesData.forEach(quote => {
        const existing = accountQuoteCounts.get(quote.client_id) || { count: 0, revenue: 0, name: '' };
        accountQuoteCounts.set(quote.client_id, {
          count: existing.count + 1,
          revenue: existing.revenue + (quote.total_amount || 0),
          name: quote.client_name || 'Unknown',
        });
      });

      const topAccounts = Array.from(accountQuoteCounts.entries())
        .map(([id, data]) => ({
          id,
          name: data.name,
          quoteCount: data.count,
          totalRevenue: data.revenue,
        }))
        .sort((a, b) => b.totalRevenue - a.totalRevenue)
        .slice(0, 5);

      setStats({
        totalAccounts: profilesData.length,
        totalQuotes: quotesData.length,
        totalRevenue,
        quotesByStatus,
        recentQuotes: quotesData.slice(0, 10) as Quote[],
        topAccounts,
      });
    }

    setLoading(false);
  };

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };


  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-[#f8f9fa] min-h-screen flex flex-col">
      <header className="bg-[#6b21a8] min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0">
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <nav className="flex items-center gap-3 md:gap-8 overflow-x-auto">
          <button
            onClick={() => navigate('/superadmin')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#e9d5ff] transition-colors border-b-2 border-white whitespace-nowrap"
          >
            Analytics
          </button>
          <button
            onClick={() => navigate('/superadmin/all-quotes')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#e9d5ff] transition-colors whitespace-nowrap"
          >
            All Quotes
          </button>
          <button
            onClick={() => navigate('/superadmin/accounts')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#e9d5ff] transition-colors whitespace-nowrap"
          >
            Accounts
          </button>
        </nav>

        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#9333ea] hover:bg-[#7e22ce] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'Super Admin'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      <div className="max-w-[1400px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-6 md:mb-8">
          <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#6b21a8] text-2xl md:text-2xl md:text-4xl mb-2">
            System Analytics
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
            Overview of all accounts and system-wide metrics
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8 md:mb-12">
          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 hover:border-[#9333ea] transition-colors">
            <div className="flex items-start justify-between mb-4">
              <div className="bg-[#9333ea] text-white rounded-lg px-6 py-3">
                <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl">
                  {stats?.totalAccounts || 0}
                </div>
              </div>
              <Users className="w-12 h-12 text-[#9333ea]" />
            </div>
            <div className="space-y-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Total Accounts</div>
              <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                Active admin accounts
              </div>
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-[#6b21a8] hover:shadow-lg transition-shadow">
            <div className="flex items-start justify-between mb-4">
              <div className="bg-[#9333ea] text-white rounded-lg px-6 py-3">
                <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl">
                  ${((stats?.totalRevenue || 0) / 1000).toFixed(0)}k
                </div>
              </div>
              <DollarSign className="w-12 h-12 text-[#9333ea]" />
            </div>
            <div className="space-y-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Total Revenue</div>
              <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                All-time system revenue
              </div>
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 hover:border-[#9333ea] transition-colors">
            <div className="flex items-start justify-between mb-4">
              <div className="bg-[#9333ea] text-white rounded-lg px-6 py-3">
                <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl">
                  {stats?.totalQuotes || 0}
                </div>
              </div>
              <FileText className="w-12 h-12 text-[#9333ea]" />
            </div>
            <div className="space-y-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Total Quotes</div>
              <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                All quotes system-wide
              </div>
            </div>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-6 md:mb-8">
          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <Activity className="w-6 h-6 text-[#6b21a8]" />
              <h2 className="[font-family:'Lexend',Helvetica] font-bold text-xl">
                Quotes by Status
              </h2>
            </div>
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <span className="[font-family:'Lexend',Helvetica] font-medium">Done</span>
                <span className="[font-family:'Lexend',Helvetica] font-bold text-green-700">
                  {stats?.quotesByStatus.done || 0}
                </span>
              </div>
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <span className="[font-family:'Lexend',Helvetica] font-medium">Emailed</span>
                <span className="[font-family:'Lexend',Helvetica] font-bold text-blue-700">
                  {stats?.quotesByStatus.emailed || 0}
                </span>
              </div>
              <div className="flex items-center justify-between p-3 bg-orange-50 rounded-lg">
                <span className="[font-family:'Lexend',Helvetica] font-medium">Exported</span>
                <span className="[font-family:'Lexend',Helvetica] font-bold text-orange-700">
                  {stats?.quotesByStatus.exported || 0}
                </span>
              </div>
              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <span className="[font-family:'Lexend',Helvetica] font-medium">Draft</span>
                <span className="[font-family:'Lexend',Helvetica] font-bold text-gray-700">
                  {stats?.quotesByStatus.draft || 0}
                </span>
              </div>
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <Target className="w-6 h-6 text-[#6b21a8]" />
              <h2 className="[font-family:'Lexend',Helvetica] font-bold text-xl">
                Top Accounts by Revenue
              </h2>
            </div>
            <div className="space-y-3">
              {stats?.topAccounts && stats.topAccounts.length > 0 ? (
                stats.topAccounts.map((account, index) => (
                  <div key={account.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-[#9333ea] rounded-full flex items-center justify-center text-white font-bold text-sm">
                        {index + 1}
                      </div>
                      <span className="[font-family:'Lexend',Helvetica] font-medium">
                        {account.name}
                      </span>
                    </div>
                    <div className="text-right">
                      <div className="[font-family:'Lexend',Helvetica] font-bold text-[#6b21a8]">
                        ${account.totalRevenue.toLocaleString()}
                      </div>
                      <div className="[font-family:'Lexend',Helvetica] text-xs text-gray-600">
                        {account.quoteCount} quotes
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8 text-gray-500 [font-family:'Lexend',Helvetica]">
                  No data available
                </div>
              )}
            </div>
          </Card>
        </div>

        <Card className="bg-white rounded-xl overflow-hidden">
          <div className="bg-[#6b21a8] px-4 md:px-6 py-3 md:py-4">
            <h2 className="[font-family:'Lexend',Helvetica] font-bold text-white text-xl">
              Recent Quotes (All Accounts)
            </h2>
          </div>
          <div className="overflow-x-auto">
          <table className="w-full min-w-[600px]">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                  CLIENT NAME
                </th>
                <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                  DATE CREATED
                </th>
                <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                  AMOUNT
                </th>
                <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                  STATUS
                </th>
              </tr>
            </thead>
            <tbody>
              {stats?.recentQuotes && stats.recentQuotes.length > 0 ? (
                stats.recentQuotes.map((quote, index) => (
                  <tr key={quote.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] font-medium">
                      {quote.client_name}
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-gray-700">
                      {formatDate(quote.created_at)}
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] font-semibold text-gray-900">
                      ${quote.total_amount?.toLocaleString() || '0'}
                    </td>
                    <td className="px-6 py-4">
                      <span className={`px-3 py-1 rounded-full text-xs font-semibold uppercase ${getStatusColor(quote.status)}`}>
                        {quote.status}
                      </span>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={4} className="px-6 py-12 text-center [font-family:'Lexend',Helvetica] text-gray-500">
                    No quotes found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          </div>
        </Card>
      </div>

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/screens/SuperAdminDashboard/SuperAdminAllQuotes.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from '../../components/ui/button';
import { Card } from '../../components/ui/card';
import { Avatar } from '../../components/ui/avatar';
import { supabase, Quote } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { ChevronDown, ChevronUp, Download, Mail, User, LogOut, Settings, HelpCircle, FileText } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { generateQuotePDF, sendQuoteEmail } from '../../lib/exportUtils';
import { getStatusColor, formatDate } from '../../lib/quoteUtils';
import { Footer } from '../../components/ui/footer';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

interface AccountWithQuotes {
  accountId: string;
  accountName: string;
  accountEmail: string;
  quotes: Quote[];
}

export const SuperAdminAllQuotes = (): JSX.Element => {
  const { profile, signOut } = useAuth();
  const navigate = useNavigate();
  const [accounts, setAccounts] = useState<AccountWithQuotes[]>([]);
  const [loading, setLoading] = useState(true);
  const [expandedAccount, setExpandedAccount] = useState<string | null>(null);

  useEffect(() => {
    fetchAllAccountsWithQuotes();
  }, []);

  const fetchAllAccountsWithQuotes = async () => {
    const { data: profilesData } = await supabase
      .from('profiles')
      .select('id, full_name, email')
      .eq('role', 'admin')
      .order('full_name');

    if (profilesData) {
      const accountsWithQuotes: AccountWithQuotes[] = [];

      for (const profileItem of profilesData) {
        const { data: quotesData } = await supabase
          .from('quotes')
          .select('*')
          .eq('client_id', profileItem.id)
          .order('created_at', { ascending: false });

        accountsWithQuotes.push({
          accountId: profileItem.id,
          accountName: profileItem.full_name || 'Unnamed Account',
          accountEmail: profileItem.email || '',
          quotes: (quotesData as Quote[]) || [],
        });
      }

      setAccounts(accountsWithQuotes);
    }

    setLoading(false);
  };


  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  const handleExportPDF = async (quote: Quote) => {
    await supabase
      .from('quotes')
      .update({ status: 'pending' })
      .eq('id', quote.id);

    generateQuotePDF(quote);
    fetchAllAccountsWithQuotes();
  };

  const handleEmail = async (quote: Quote) => {
    await sendQuoteEmail(quote);
    await supabase
      .from('quotes')
      .update({ status: 'pending' })
      .eq('id', quote.id);
    fetchAllAccountsWithQuotes();
  };

  const toggleAccount = (accountId: string) => {
    setExpandedAccount(expandedAccount === accountId ? null : accountId);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-[#f8f9fa] min-h-screen flex flex-col">
      <header className="bg-[#6b21a8] min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0">
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <nav className="flex items-center gap-8">
          <button
            onClick={() => navigate('/superadmin')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#e9d5ff] transition-colors"
          >
            Analytics
          </button>
          <button
            onClick={() => navigate('/superadmin/all-quotes')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#e9d5ff] transition-colors border-b-2 border-white"
          >
            All Quotes
          </button>
          <button
            onClick={() => navigate('/superadmin/accounts')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#e9d5ff] transition-colors"
          >
            Accounts
          </button>
        </nav>

        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#9333ea] hover:bg-[#7e22ce] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'Super Admin'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      <div className="max-w-[1400px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-8">
          <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#6b21a8] text-2xl md:text-4xl mb-2">
            All Account Quotes
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
            View quotes from all accounts in the system
          </p>
        </div>

        <div className="space-y-4">
          {accounts.length > 0 ? (
            accounts.map((account) => (
              <Card key={account.accountId} className="bg-white rounded-xl overflow-hidden">
                <button
                  onClick={() => toggleAccount(account.accountId)}
                  className="w-full flex items-center justify-between p-6 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-[#9333ea] rounded-full flex items-center justify-center text-white font-bold text-xl">
                      {account.accountName.charAt(0).toUpperCase()}
                    </div>
                    <div className="text-left">
                      <div className="[font-family:'Lexend',Helvetica] font-bold text-xl text-gray-900">
                        {account.accountName}
                      </div>
                      <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                        {account.accountEmail}
                      </div>
                    </div>
                    <div className="bg-[#6b21a8] text-white px-4 py-2 rounded-lg ml-4">
                      <div className="flex items-center gap-2">
                        <FileText className="w-4 h-4" />
                        <span className="[font-family:'Lexend',Helvetica] font-bold">
                          {account.quotes.length} {account.quotes.length === 1 ? 'Quote' : 'Quotes'}
                        </span>
                      </div>
                    </div>
                  </div>
                  {expandedAccount === account.accountId ? (
                    <ChevronUp className="w-6 h-6 text-gray-600" />
                  ) : (
                    <ChevronDown className="w-6 h-6 text-gray-600" />
                  )}
                </button>

                {expandedAccount === account.accountId && (
                  <div className="border-t overflow-x-auto">
                    {account.quotes.length > 0 ? (
                      <table className="w-full min-w-[768px]">
                        <thead className="bg-gray-100">
                          <tr>
                            <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                              CLIENT NAME
                            </th>
                            <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                              DATE CREATED
                            </th>
                            <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                              TOTAL AMOUNT
                            </th>
                            <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                              STATUS
                            </th>
                            <th className="px-6 py-3 text-left [font-family:'Lexend',Helvetica] font-bold text-gray-700 text-sm">
                              ACTIONS
                            </th>
                          </tr>
                        </thead>
                        <tbody>
                          {account.quotes.map((quote, index) => (
                            <tr key={quote.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                              <td className="px-6 py-4 [font-family:'Lexend',Helvetica] font-medium text-gray-900">
                                {quote.client_name}
                              </td>
                              <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-gray-700">
                                {formatDate(quote.created_at)}
                              </td>
                              <td className="px-6 py-4 [font-family:'Lexend',Helvetica] font-semibold text-gray-900">
                                ${quote.total_amount?.toLocaleString() || '0'}
                              </td>
                              <td className="px-6 py-4">
                                <span className={`px-3 py-1 rounded-full text-xs font-semibold uppercase ${getStatusColor(quote.status)}`}>
                                  {quote.status}
                                </span>
                              </td>
                              <td className="px-6 py-4">
                                <div className="flex items-center gap-2">
                                  <Button
                                    onClick={() => handleExportPDF(quote)}
                                    className="bg-transparent hover:bg-gray-200 p-2"
                                    title="Download PDF"
                                  >
                                    <Download className="w-4 h-4 text-gray-700" />
                                  </Button>
                                  <Button
                                    onClick={() => handleEmail(quote)}
                                    className="bg-transparent hover:bg-gray-200 p-2"
                                    title="Send Email"
                                  >
                                    <Mail className="w-4 h-4 text-gray-700" />
                                  </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    ) : (
                      <div className="px-6 py-12 text-center [font-family:'Lexend',Helvetica] text-gray-500">
                        No quotes for this account
                      </div>
                    )}
                  </div>
                )}
              </Card>
            ))
          ) : (
            <Card className="p-12 text-center">
              <p className="[font-family:'Lexend',Helvetica] text-gray-500 text-lg">
                No accounts found
              </p>
            </Card>
          )}
        </div>
      </div>

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/screens/SuperAdminDashboard/SuperAdminAccounts.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from '../../components/ui/button';
import { Card } from '../../components/ui/card';
import { Avatar } from '../../components/ui/avatar';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../../components/ui/dialog';
import { Footer } from '../../components/ui/footer';
import { supabase } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { User, LogOut, Settings, HelpCircle, Trash2, RotateCcw, Plus, Mail } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

interface AccountData {
  id: string;
  full_name: string;
  email: string;
  role: string;
  created_at: string;
  quote_count?: number;
}

export const SuperAdminAccounts = (): JSX.Element => {
  const { profile, signOut } = useAuth();
  const navigate = useNavigate();
  const [accounts, setAccounts] = useState<AccountData[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{ type: 'create' | 'delete' | 'reset'; data?: any }>({ type: 'create' });
  const [newAccount, setNewAccount] = useState({
    full_name: '',
    email: '',
    password: '',
  });

  useEffect(() => {
    fetchAccounts();
  }, []);

  const fetchAccounts = async () => {
    const { data: profilesData } = await supabase
      .from('profiles')
      .select('id, full_name, email, role, created_at')
      .eq('role', 'admin')
      .order('created_at', { ascending: false });

    if (profilesData) {
      const accountsWithCounts = await Promise.all(
        profilesData.map(async (account) => {
          const { count } = await supabase
            .from('quotes')
            .select('*', { count: 'exact', head: true })
            .eq('client_id', account.id);

          return {
            ...account,
            quote_count: count || 0,
          };
        })
      );

      setAccounts(accountsWithCounts as AccountData[]);
    }

    setLoading(false);
  };

  const handleCreateAccountClick = () => {
    if (!newAccount.email || !newAccount.password || !newAccount.full_name) {
      alert('Please fill in all fields');
      return;
    }
    setConfirmAction({ type: 'create', data: { ...newAccount } });
    setShowConfirmModal(true);
  };

  const handleCreateAccount = async () => {
    try {
      const { data: authData, error: signUpError } = await supabase.auth.signUp({
        email: confirmAction.data.email,
        password: confirmAction.data.password,
      });

      if (signUpError) throw signUpError;

      if (authData.user) {
        const { error: profileError } = await supabase
          .from('profiles')
          .update({
            full_name: confirmAction.data.full_name,
            role: 'admin',
          })
          .eq('id', authData.user.id);

        if (profileError) throw profileError;

        alert('Account created successfully!');
        setShowCreateModal(false);
        setShowConfirmModal(false);
        setNewAccount({ full_name: '', email: '', password: '' });
        fetchAccounts();
      }
    } catch (error: any) {
      console.error('Error creating account:', error);
      alert(`Failed to create account: ${error.message}`);
      setShowConfirmModal(false);
    }
  };

  const handleResetPasswordClick = (accountId: string, email: string) => {
    setConfirmAction({ type: 'reset', data: { accountId, email } });
    setShowConfirmModal(true);
  };

  const handleResetPassword = async () => {

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(confirmAction.data.email, {
        redirectTo: `${window.location.origin}/reset-password`,
      });

      if (error) throw error;

      alert('Password reset email sent successfully!');
      setShowConfirmModal(false);
    } catch (error: any) {
      console.error('Error resetting password:', error);
      alert(`Failed to send password reset: ${error.message}`);
      setShowConfirmModal(false);
    }
  };

  const handleDeleteAccountClick = (accountId: string, accountName: string) => {
    setConfirmAction({ type: 'delete', data: { accountId, accountName } });
    setShowConfirmModal(true);
  };

  const handleDeleteAccount = async () => {

    try {
      await supabase
        .from('quotes')
        .delete()
        .eq('client_id', confirmAction.data.accountId);

      await supabase
        .from('user_settings')
        .delete()
        .eq('user_id', confirmAction.data.accountId);

      await supabase
        .from('profiles')
        .delete()
        .eq('id', confirmAction.data.accountId);

      alert('Account deleted successfully!');
      setShowConfirmModal(false);
      fetchAccounts();
    } catch (error: any) {
      console.error('Error deleting account:', error);
      alert(`Failed to delete account: ${error.message}`);
      setShowConfirmModal(false);
    }
  };

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-[#f8f9fa] min-h-screen flex flex-col">
      <header className="bg-[#6b21a8] min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0">
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <nav className="flex items-center gap-8">
          <button
            onClick={() => navigate('/superadmin')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#e9d5ff] transition-colors"
          >
            Analytics
          </button>
          <button
            onClick={() => navigate('/superadmin/all-quotes')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#e9d5ff] transition-colors"
          >
            All Quotes
          </button>
          <button
            onClick={() => navigate('/superadmin/accounts')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#e9d5ff] transition-colors border-b-2 border-white"
          >
            Accounts
          </button>
        </nav>

        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#9333ea] hover:bg-[#7e22ce] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'Super Admin'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      <div className="max-w-[1400px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#6b21a8] text-2xl md:text-4xl mb-2">
              Account Management
            </h1>
            <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
              Create, manage, and delete user accounts
            </p>
          </div>
          <Button
            onClick={() => setShowCreateModal(!showCreateModal)}
            className="bg-[#6b21a8] hover:bg-[#581c87] text-white px-6 py-3 rounded-lg [font-family:'Lexend',Helvetica] font-bold flex items-center gap-2"
          >
            <Plus className="w-5 h-5" />
            Create New Account
          </Button>
        </div>

        {showCreateModal && (
          <Card className="p-8 mb-8 bg-white rounded-xl border-2 border-[#6b21a8]">
            <h2 className="[font-family:'Lexend',Helvetica] font-bold text-xl mb-6">
              Create New Admin Account
            </h2>
            <div className="grid grid-cols-2 gap-6 mb-6">
              <div>
                <Label htmlFor="new_full_name" className="text-gray-700 mb-2">
                  Full Name
                </Label>
                <Input
                  id="new_full_name"
                  value={newAccount.full_name}
                  onChange={(e) => setNewAccount({ ...newAccount, full_name: e.target.value })}
                  className="border-gray-300"
                  placeholder=""
                />
              </div>
              <div>
                <Label htmlFor="new_email" className="text-gray-700 mb-2">
                  Email
                </Label>
                <Input
                  id="new_email"
                  type="email"
                  value={newAccount.email}
                  onChange={(e) => setNewAccount({ ...newAccount, email: e.target.value })}
                  className="border-gray-300"
                  placeholder=""
                />
              </div>
              <div>
                <Label htmlFor="new_password" className="text-gray-700 mb-2">
                  Password
                </Label>
                <Input
                  id="new_password"
                  type="password"
                  value={newAccount.password}
                  onChange={(e) => setNewAccount({ ...newAccount, password: e.target.value })}
                  className="border-gray-300"
                  placeholder=""
                />
              </div>
            </div>
            <div className="flex justify-end gap-4">
              <Button
                onClick={() => {
                  setShowCreateModal(false);
                  setNewAccount({ full_name: '', email: '', password: '' });
                }}
                className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg"
              >
                Cancel
              </Button>
              <Button
                onClick={handleCreateAccountClick}
                className="bg-[#6b21a8] hover:bg-[#581c87] text-white px-6 py-2 rounded-lg"
              >
                Create Account
              </Button>
            </div>
          </Card>
        )}

        <Card className="bg-white rounded-xl overflow-hidden">
          <div className="overflow-x-auto">
          <table className="w-full min-w-[768px]">
            <thead className="bg-[#6b21a8]">
              <tr>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  ACCOUNT NAME
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  EMAIL
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  QUOTES
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  CREATED
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  ACTIONS
                </th>
              </tr>
            </thead>
            <tbody>
              {accounts.length > 0 ? (
                accounts.map((account, index) => (
                  <tr key={account.id} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-[#9333ea] rounded-full flex items-center justify-center text-white font-bold">
                          {account.full_name?.charAt(0).toUpperCase() || 'A'}
                        </div>
                        <span className="[font-family:'Lexend',Helvetica] font-medium text-lg">
                          {account.full_name || 'Unnamed Account'}
                        </span>
                      </div>
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-gray-700">
                      {account.email}
                    </td>
                    <td className="px-6 py-4">
                      <span className="bg-[#6b21a8] text-white px-3 py-1 rounded-full text-sm font-semibold">
                        {account.quote_count || 0}
                      </span>
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-gray-700">
                      {formatDate(account.created_at)}
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <Button
                          onClick={() => handleResetPasswordClick(account.id, account.email)}
                          className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg flex items-center gap-2"
                          title="Reset Password"
                        >
                          <RotateCcw className="w-4 h-4" />
                          Reset
                        </Button>
                        <Button
                          onClick={() => handleDeleteAccountClick(account.id, account.full_name)}
                          className="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-lg flex items-center gap-2"
                          title="Delete Account"
                        >
                          <Trash2 className="w-4 h-4" />
                          Delete
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={5} className="px-6 py-12 text-center [font-family:'Lexend',Helvetica] text-gray-500">
                    No accounts found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          </div>
        </Card>
      </div>

      <Dialog open={showConfirmModal} onOpenChange={setShowConfirmModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="[font-family:'Lexend',Helvetica] font-bold text-xl">
              {confirmAction.type === 'create' && 'Create Account?'}
              {confirmAction.type === 'delete' && 'Delete Account?'}
              {confirmAction.type === 'reset' && 'Reset Password?'}
            </DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p className="[font-family:'Lexend',Helvetica] text-gray-700">
              {confirmAction.type === 'create' && `Are you sure you want to create an account for ${confirmAction.data?.email}?`}
              {confirmAction.type === 'delete' && `Are you sure you want to delete the account for ${confirmAction.data?.accountName}? This will also delete all their quotes. This action cannot be undone.`}
              {confirmAction.type === 'reset' && `Send password reset email to ${confirmAction.data?.email}?`}
            </p>
          </div>
          <div className="flex justify-end gap-3">
            <Button
              onClick={() => setShowConfirmModal(false)}
              className="bg-gray-200 text-gray-800 hover:bg-gray-300 [font-family:'Lexend',Helvetica] font-semibold"
            >
              Cancel
            </Button>
            <Button
              onClick={() => {
                if (confirmAction.type === 'create') handleCreateAccount();
                if (confirmAction.type === 'delete') handleDeleteAccount();
                if (confirmAction.type === 'reset') handleResetPassword();
              }}
              className={`${confirmAction.type === 'delete' ? 'bg-red-600 hover:bg-red-700' : 'bg-[#003D82] hover:bg-[#022d70]'} text-white [font-family:'Lexend',Helvetica] font-semibold`}
            >
              Confirm
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/screens/SuperAdminDashboard/SuperAdminDashboard.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from '../../components/ui/button';
import { Card } from '../../components/ui/card';
import { Avatar } from '../../components/ui/avatar';
import { supabase, Quote, DashboardStats } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { Users, DollarSign, FileText, Download, Mail, TrendingUp, LogOut, User, Settings, HelpCircle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { getStatusColor, formatDate } from '../../lib/quoteUtils';
import { Footer } from '../../components/ui/footer';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

export const SuperAdminDashboard = (): JSX.Element => {
  const { profile, signOut } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (profile?.id) {
      fetchDashboardData();
    }
  }, [profile]);

  const fetchDashboardData = async () => {
    if (!profile?.id) return;

    const { data: statsData } = await supabase
      .from('dashboard_stats')
      .select('*')
      .eq('user_id', profile.id)
      .maybeSingle();

    if (statsData) {
      setStats(statsData as DashboardStats);
    } else {
      const defaultStats: Partial<DashboardStats> = {
        user_id: profile.id,
        total_clients: 673,
        total_revenue: 19000,
        total_quotes: 1083,
        clients_change_percent: 19,
        revenue_change_percent: 15,
        quotes_change_percent: 27,
      };

      await supabase.from('dashboard_stats').insert(defaultStats);
      setStats(defaultStats as DashboardStats);
    }

    const { data: quotesData } = await supabase
      .from('quotes')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (quotesData) {
      setQuotes(quotesData as Quote[]);
    }

    setLoading(false);
  };


  const handleDownload = async (quoteId: string) => {
    // Update quote status to 'downloaded'
    await supabase
      .from('quotes')
      .update({ status: 'downloaded' })
      .eq('id', quoteId);

    // Refresh quotes
    fetchDashboardData();

    // TODO: Implement actual PDF download
    console.log('Download quote:', quoteId);
  };

  const handleEmail = async (quoteId: string) => {
    // Update quote status to 'emailed'
    await supabase
      .from('quotes')
      .update({ status: 'emailed' })
      .eq('id', quoteId);

    // Refresh quotes
    fetchDashboardData();

    // TODO: Implement actual email functionality
    console.log('Email quote:', quoteId);
  };

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-[#f8f9fa] min-h-screen flex flex-col">
      <header className="bg-[#003D82] min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0">
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <div className="flex items-center gap-8">
          <nav className="flex items-center gap-8">
          <button
            onClick={() => navigate('/dashboard')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Dashboard
          </button>
          <button
            onClick={() => navigate('/create-quote')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Create Quote
          </button>
          <button
            onClick={() => navigate('/all-quotes')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            All Quotes
          </button>
          </nav>

          <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#003D82] hover:bg-[#002A5C] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'My Account'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          </div>
        </div>
      </header>

      <div className="max-w-[1400px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-8">
          <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#023c97] text-2xl md:text-4xl mb-2">
            Welcome, {profile?.full_name || 'Daniel'}!
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
            Here is what is happening with your business today.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-12">
          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 hover:border-[#75c4cc] transition-colors">
            <div className="flex items-start justify-between mb-4">
              <div className="bg-[#75c4cc] text-white rounded-lg px-6 py-3">
                <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl">
                  {stats?.total_clients || 673}
                </div>
              </div>
              <Users className="w-12 h-12 text-[#75c4cc]" />
            </div>
            <div className="space-y-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Total</div>
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Clients</div>
              <div className="flex items-center gap-2 text-green-600">
                <TrendingUp className="w-4 h-4" />
                <span className="[font-family:'Lexend',Helvetica] font-semibold">
                  + {stats?.clients_change_percent || 19}%
                </span>
              </div>
              <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                higher than last month
              </div>
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-[#023c97] hover:shadow-lg transition-shadow">
            <div className="flex items-start justify-between mb-4">
              <div className="bg-[#75c4cc] text-white rounded-lg px-6 py-3">
                <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl">
                  {(stats?.total_revenue || 19000) / 1000}k
                </div>
              </div>
              <DollarSign className="w-12 h-12 text-[#75c4cc]" />
            </div>
            <div className="space-y-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Total</div>
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Revenue</div>
              <div className="flex items-center gap-2 text-green-600">
                <TrendingUp className="w-4 h-4" />
                <span className="[font-family:'Lexend',Helvetica] font-semibold">
                  + {stats?.revenue_change_percent || 15}%
                </span>
              </div>
              <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                higher than last month
              </div>
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 hover:border-[#75c4cc] transition-colors">
            <div className="flex items-start justify-between mb-4">
              <div className="bg-[#75c4cc] text-white rounded-lg px-6 py-3">
                <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl">
                  {stats?.total_quotes || 1083}
                </div>
              </div>
              <FileText className="w-12 h-12 text-[#75c4cc]" />
            </div>
            <div className="space-y-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Total</div>
              <div className="[font-family:'Lexend',Helvetica] font-bold text-lg">Quotes</div>
              <div className="flex items-center gap-2 text-green-600">
                <TrendingUp className="w-4 h-4" />
                <span className="[font-family:'Lexend',Helvetica] font-semibold">
                  + {stats?.quotes_change_percent || 27}%
                </span>
              </div>
              <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                higher than last month
              </div>
            </div>
          </Card>
        </div>

        <Card className="bg-white rounded-xl overflow-hidden">
          <div className="overflow-x-auto">
          <table className="w-full min-w-[640px]">
            <thead className="bg-[#003D82]">
              <tr>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  CLIENT NAME
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  DATE CREATED
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  STATUS
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  DOWNLOAD/EMAIL
                </th>
              </tr>
            </thead>
            <tbody>
              {quotes.length > 0 ? (
                quotes.map((quote, index) => (
                  <tr key={quote.id} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 bg-gray-300 rounded-full"></div>
                        <span className="[font-family:'Lexend',Helvetica] font-medium text-lg">
                          {quote.client_name}
                        </span>
                      </div>
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-lg">
                      {formatDate(quote.created_at)}
                    </td>
                    <td className="px-6 py-4">
                      <span className={`[font-family:'Lexend',Helvetica] font-semibold text-lg capitalize ${getStatusColor(quote.status, 'text')}`}>
                        {quote.status}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-4">
                        <Button
                          onClick={() => handleDownload(quote.id)}
                          className="bg-transparent hover:bg-gray-100 p-2"
                        >
                          <Download className="w-5 h-5 text-black" />
                          <span className="ml-2 [font-family:'Lexend',Helvetica] font-semibold text-black">
                            Download
                          </span>
                        </Button>
                        <Button
                          onClick={() => handleEmail(quote.id)}
                          className="bg-transparent hover:bg-gray-100 p-2"
                        >
                          <Mail className="w-5 h-5 text-black" />
                          <span className="ml-2 [font-family:'Lexend',Helvetica] font-semibold text-black">
                            Email
                          </span>
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={4} className="px-6 py-12 text-center [font-family:'Lexend',Helvetica] text-gray-500">
                    No quotes found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          </div>
        </Card>

        <div className="flex justify-center md:justify-end mt-8">
          <Button
            onClick={() => navigate('/all-quotes')}
            className="bg-[#003D82] hover:bg-[#022d70] text-white px-8 py-4 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-lg"
          >
            See All Quotes
          </Button>
        </div>
      </div>

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/screens/UserSettings/UserSettings.tsx">
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { Card } from '../../components/ui/card';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Button } from '../../components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../../components/ui/dialog';
import { Footer } from '../../components/ui/footer';
import { ArrowLeft, Save, User, DollarSign, Building2, LogOut, Settings, HelpCircle } from 'lucide-react';
import { Avatar } from '../../components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

interface UserSettings {
  director_of_photography_rate: number;
  editor_rate: number;
  producer_rate: number;
  enablement_content_owner_rate: number;
  creative_director_rate: number;
  set_designer_rate: number;
  company_name: string;
  phone_number: string;
  rush_fee: number;
  high_traffic_fee: number;
}

export const UserSettings: React.FC = () => {
  const navigate = useNavigate();
  const { user, profile, signOut } = useAuth();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [settings, setSettings] = useState<UserSettings>({
    director_of_photography_rate: 0,
    editor_rate: 0,
    producer_rate: 0,
    enablement_content_owner_rate: 0,
    creative_director_rate: 0,
    set_designer_rate: 0,
    company_name: '',
    phone_number: '',
    rush_fee: 0,
    high_traffic_fee: 0,
  });
  const [accountInfo, setAccountInfo] = useState({
    full_name: profile?.full_name || '',
    email: user?.email || '',
  });

  useEffect(() => {
    loadSettings();
  }, [user]);

  const loadSettings = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('user_settings')
        .select('*')
        .eq('user_id', user.id)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        console.error('Error loading settings:', error);
        return;
      }

      if (data) {
        setSettings({
          director_of_photography_rate: data.director_of_photography_rate || 0,
          editor_rate: data.editor_rate || 0,
          producer_rate: data.producer_rate || 0,
          enablement_content_owner_rate: data.enablement_content_owner_rate || 0,
          creative_director_rate: data.creative_director_rate || 0,
          set_designer_rate: data.set_designer_rate || 0,
          company_name: data.company_name || '',
          phone_number: data.phone_number || '',
          rush_fee: data.rush_fee || 0,
          high_traffic_fee: data.high_traffic_fee || 0,
        });
      }
    } finally {
      setLoading(false);
    }
  };

  const handleSaveSettingsClick = () => {
    setShowConfirmModal(true);
  };

  const handleSaveSettings = async () => {
    if (!user) return;
    setSaving(true);

    try {
      const { error: settingsError } = await supabase
        .from('user_settings')
        .upsert({
          user_id: user.id,
          ...settings,
        });

      if (settingsError) throw settingsError;

      const { error: profileError } = await supabase
        .from('profiles')
        .update({ full_name: accountInfo.full_name })
        .eq('id', user.id);

      if (profileError) throw profileError;

      alert('Settings saved successfully!');
      setShowConfirmModal(false);
    } catch (error) {
      console.error('Error saving settings:', error);
      alert('Failed to save settings. Please try again.');
      setShowConfirmModal(false);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-[#e6f2ff] to-white flex items-center justify-center">
        <div className="text-lg text-gray-600">Loading settings...</div>
      </div>
    );
  }

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  const isSuperAdmin = profile?.role === 'superadmin';
  const headerBgColor = isSuperAdmin ? 'bg-[#6b21a8]' : 'bg-[#003D82]';
  const avatarBgColor = isSuperAdmin ? 'bg-[#9333ea] hover:bg-[#7e22ce]' : 'bg-[#003D82] hover:bg-[#002A5C]';

  return (
    <div className="min-h-screen bg-[#f8f9fa] flex flex-col">
      <header className={`${headerBgColor} min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0`}>
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <nav className="flex items-center gap-3 md:gap-8 overflow-x-auto">
          {isSuperAdmin ? (
            <>
              <button
                onClick={() => navigate('/superadmin')}
                className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#e9d5ff] transition-colors whitespace-nowrap"
              >
                Analytics
              </button>
              <button
                onClick={() => navigate('/superadmin/all-quotes')}
                className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#e9d5ff] transition-colors whitespace-nowrap"
              >
                All Quotes
              </button>
              <button
                onClick={() => navigate('/superadmin/accounts')}
                className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#e9d5ff] transition-colors whitespace-nowrap"
              >
                Accounts
              </button>
            </>
          ) : (
            <>
              <button
                onClick={() => navigate('/dashboard')}
                className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#8FC4D4] transition-colors whitespace-nowrap"
              >
                Dashboard
              </button>
              <button
                onClick={() => navigate('/create-quote')}
                className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#8FC4D4] transition-colors whitespace-nowrap"
              >
                Create Quote
              </button>
              <button
                onClick={() => navigate('/all-quotes')}
                className="[font-family:'Lexend',Helvetica] font-semibold text-white text-sm md:text-lg hover:text-[#8FC4D4] transition-colors whitespace-nowrap"
              >
                All Quotes
              </button>
            </>
          )}
        </nav>

        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className={`w-12 h-12 ${avatarBgColor} transition-colors`}>
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'My Account'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      <div className="max-w-[1200px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-6 md:mb-8">
          <h1 className={`[font-family:'Lexend',Helvetica] font-bold ${isSuperAdmin ? 'text-[#6b21a8]' : 'text-[#003D82]'} text-2xl md:text-4xl mb-2`}>
            Account Settings
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
            Manage your profile and crew rate preferences
          </p>
        </div>

        <div className="space-y-6">
          <Card className="p-4 md:p-8 bg-white rounded-xl border-2 border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <User className={`w-6 h-6 ${isSuperAdmin ? 'text-[#6b21a8]' : 'text-[#003D82]'}`} />
              <h2 className="[font-family:'Lexend',Helvetica] font-bold text-black text-2xl">
                Account Information
              </h2>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
              <div>
                <Label htmlFor="full_name" className="text-gray-700 mb-2">
                  Full Name
                </Label>
                <Input
                  id="full_name"
                  value={accountInfo.full_name}
                  onChange={(e) =>
                    setAccountInfo({ ...accountInfo, full_name: e.target.value })
                  }
                  className="border-gray-300"
                />
              </div>
              <div>
                <Label htmlFor="email" className="text-gray-700 mb-2">
                  Email
                </Label>
                <Input
                  id="email"
                  value={accountInfo.email}
                  disabled
                  className="border-gray-300 bg-gray-50"
                />
              </div>
              <div>
                <Label htmlFor="company_name" className="text-gray-700 mb-2">
                  Company Name
                </Label>
                <Input
                  id="company_name"
                  value={settings.company_name}
                  onChange={(e) =>
                    setSettings({ ...settings, company_name: e.target.value })
                  }
                  className="border-gray-300"
                />
              </div>
              <div>
                <Label htmlFor="phone_number" className="text-gray-700 mb-2">
                  Phone Number
                </Label>
                <Input
                  id="phone_number"
                  value={settings.phone_number}
                  onChange={(e) =>
                    setSettings({ ...settings, phone_number: e.target.value })
                  }
                  className="border-gray-300"
                />
              </div>
            </div>
          </Card>

          <Card className="p-4 md:p-8 bg-white rounded-xl border-2 border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <DollarSign className={`w-6 h-6 ${isSuperAdmin ? 'text-[#6b21a8]' : 'text-[#003D82]'}`} />
              <h2 className="[font-family:'Lexend',Helvetica] font-bold text-black text-2xl">
                Crew Rates (Hourly)
              </h2>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
              <div>
                <Label htmlFor="dop_rate" className="text-gray-700 mb-2">
                  Director of Photography
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="dop_rate"
                    type="number"
                    step="0.01"
                    value={settings.director_of_photography_rate}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        director_of_photography_rate: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="editor_rate" className="text-gray-700 mb-2">
                  Editor
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="editor_rate"
                    type="number"
                    step="0.01"
                    value={settings.editor_rate}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        editor_rate: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="producer_rate" className="text-gray-700 mb-2">
                  Producer
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="producer_rate"
                    type="number"
                    step="0.01"
                    value={settings.producer_rate}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        producer_rate: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="eco_rate" className="text-gray-700 mb-2">
                  Enablement Content Owner
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="eco_rate"
                    type="number"
                    step="0.01"
                    value={settings.enablement_content_owner_rate}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        enablement_content_owner_rate: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="cd_rate" className="text-gray-700 mb-2">
                  Creative Director
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="cd_rate"
                    type="number"
                    step="0.01"
                    value={settings.creative_director_rate}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        creative_director_rate: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="sd_rate" className="text-gray-700 mb-2">
                  Set Designer
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="sd_rate"
                    type="number"
                    step="0.01"
                    value={settings.set_designer_rate}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        set_designer_rate: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
            </div>
          </Card>

          <Card className="p-4 md:p-8 bg-white rounded-xl border-2 border-gray-200">
            <div className="flex items-center gap-3 mb-6">
              <Building2 className={`w-6 h-6 ${isSuperAdmin ? 'text-[#6b21a8]' : 'text-[#003D82]'}`} />
              <h2 className="[font-family:'Lexend',Helvetica] font-bold text-black text-2xl">
                Additional Fees
              </h2>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
              <div>
                <Label htmlFor="rush_fee" className="text-gray-700 mb-2">
                  Rush Fee
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="rush_fee"
                    type="number"
                    step="0.01"
                    value={settings.rush_fee}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        rush_fee: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="high_traffic_fee" className="text-gray-700 mb-2">
                  High Traffic Fee
                </Label>
                <div className="relative">
                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                    $
                  </span>
                  <Input
                    id="high_traffic_fee"
                    type="number"
                    step="0.01"
                    value={settings.high_traffic_fee}
                    onChange={(e) =>
                      setSettings({
                        ...settings,
                        high_traffic_fee: parseFloat(e.target.value) || 0,
                      })
                    }
                    className="border-gray-300 pl-8"
                  />
                </div>
              </div>
            </div>
          </Card>

          <div className="flex justify-end">
            <Button
              onClick={handleSaveSettingsClick}
              disabled={saving}
              className={`${isSuperAdmin ? 'bg-[#6b21a8] hover:bg-[#581c87]' : 'bg-[#003D82] hover:bg-[#003D82]/90'} text-white px-8 py-6 text-lg`}
            >
              <Save className="w-5 h-5 mr-2" />
              {saving ? 'Saving...' : 'Save Changes'}
            </Button>
          </div>
        </div>
      </div>

      <Dialog open={showConfirmModal} onOpenChange={setShowConfirmModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="[font-family:'Lexend',Helvetica] font-bold text-xl">
              Save Settings?
            </DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p className="[font-family:'Lexend',Helvetica] text-gray-700">
              Are you sure you want to save these changes?
            </p>
          </div>
          <div className="flex justify-end gap-3">
            <Button
              onClick={() => setShowConfirmModal(false)}
              className="bg-gray-200 text-gray-800 hover:bg-gray-300 [font-family:'Lexend',Helvetica] font-semibold"
            >
              Cancel
            </Button>
            <Button
              onClick={handleSaveSettings}
              disabled={saving}
              className="bg-[#003D82] hover:bg-[#002A5C] text-white [font-family:'Lexend',Helvetica] font-semibold"
            >
              {saving ? 'Saving...' : 'Confirm'}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/screens/AllQuotes/AllQuotes.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from '../../components/ui/button';
import { Card } from '../../components/ui/card';
import { Avatar } from '../../components/ui/avatar';
import { supabase, Quote } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { Download, Mail, LogOut, User, Edit, Settings, HelpCircle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { generateQuotePDF, generateQuoteExcel, sendQuoteEmail } from '../../lib/exportUtils';
import { getStatusColor, formatDate } from '../../lib/quoteUtils';
import { EditQuoteModal } from '../../components/EditQuoteModal';
import { Footer } from '../../components/ui/footer';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

export const AllQuotes = (): JSX.Element => {
  const { profile, signOut } = useAuth();
  const navigate = useNavigate();
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [loading, setLoading] = useState(true);
  const [editingQuote, setEditingQuote] = useState<Quote | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    fetchQuotes();
  }, []);

  const fetchQuotes = async () => {
    const { data: quotesData } = await supabase
      .from('quotes')
      .select('*')
      .order('created_at', { ascending: false });

    if (quotesData) {
      setQuotes(quotesData as Quote[]);
    }

    setLoading(false);
  };


  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  const handleExportPDF = async (quote: Quote) => {
    await supabase
      .from('quotes')
      .update({ status: 'pending' })
      .eq('id', quote.id);

    generateQuotePDF(quote);
    fetchQuotes();
  };

  const handleExportExcel = (quote: Quote) => {
    generateQuoteExcel(quote);
  };

  const handleEmail = async (quote: Quote) => {
    await sendQuoteEmail(quote);
    await supabase
      .from('quotes')
      .update({ status: 'pending' })
      .eq('id', quote.id);
    fetchQuotes();
  };

  const handleEditQuote = (quote: Quote) => {
    setEditingQuote(quote);
    setIsModalOpen(true);
  };

  const handleModalSuccess = () => {
    fetchQuotes();
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-[#f8f9fa] min-h-screen flex flex-col">
      <header className="bg-[#003D82] min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0">
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <div className="flex items-center gap-8">
          <nav className="flex items-center gap-8">
          <button
            onClick={() => navigate('/dashboard')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Dashboard
          </button>
          <button
            onClick={() => navigate('/create-quote')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Create Quote
          </button>
          <button
            onClick={() => navigate('/all-quotes')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            All Quotes
          </button>
          </nav>

          <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#003D82] hover:bg-[#002A5C] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'My Account'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          </div>
        </div>
      </header>

      <div className="max-w-[1400px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-8">
          <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-2xl md:text-4xl mb-2">
            All Quotes
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
            View and manage all your quotes.
          </p>
        </div>

        <Card className="bg-white rounded-xl overflow-hidden">
          <div className="overflow-x-auto">
          <table className="w-full min-w-[768px]">
            <thead className="bg-[#003D82]">
              <tr>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  CLIENT NAME
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  DATE CREATED
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  STATUS
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  DOWNLOAD/EMAIL
                </th>
              </tr>
            </thead>
            <tbody>
              {quotes.length > 0 ? (
                quotes.map((quote, index) => (
                  <tr key={quote.id} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
                    <td className="px-6 py-4">
                      <button
                        onClick={() => handleEditQuote(quote)}
                        className="flex items-center gap-3 hover:opacity-75 transition-opacity text-left w-full"
                      >
                        <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
                          <Edit className="w-5 h-5 text-gray-600" />
                        </div>
                        <span className="[font-family:'Lexend',Helvetica] font-medium text-lg">
                          {quote.client_name}
                        </span>
                      </button>
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-lg">
                      {formatDate(quote.created_at)}
                    </td>
                    <td className="px-6 py-4">
                      <span className={`[font-family:'Lexend',Helvetica] font-semibold text-lg capitalize ${getStatusColor(quote.status, 'text')}`}>
                        {quote.status}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <Button
                          onClick={() => handleExportPDF(quote)}
                          className="bg-transparent hover:bg-gray-100 p-2"
                        >
                          <Download className="w-5 h-5 text-black" />
                          <span className="ml-2 [font-family:'Lexend',Helvetica] font-semibold text-black">
                            PDF
                          </span>
                        </Button>
                        <Button
                          onClick={() => handleExportExcel(quote)}
                          className="bg-transparent hover:bg-gray-100 p-2"
                        >
                          <Download className="w-5 h-5 text-black" />
                          <span className="ml-2 [font-family:'Lexend',Helvetica] font-semibold text-black">
                            Excel
                          </span>
                        </Button>
                        <Button
                          onClick={() => handleEmail(quote)}
                          className="bg-transparent hover:bg-gray-100 p-2"
                        >
                          <Mail className="w-5 h-5 text-black" />
                          <span className="ml-2 [font-family:'Lexend',Helvetica] font-semibold text-black">
                            Email
                          </span>
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={4} className="px-6 py-12 text-center [font-family:'Lexend',Helvetica] text-gray-500">
                    No quotes found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          </div>
        </Card>

        <div className="flex justify-center md:justify-start mt-8">
          <Button
            onClick={() => navigate('/dashboard')}
            className="bg-[#5a5a5a] hover:bg-[#4a4a4a] text-white px-8 py-4 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-lg"
          >
            Back to Dashboard
          </Button>
        </div>
      </div>

      {editingQuote && (
        <EditQuoteModal
          quote={editingQuote}
          open={isModalOpen}
          onOpenChange={setIsModalOpen}
          onSuccess={handleModalSuccess}
        />
      )}

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/screens/CreateQuote/CreateQuote.tsx">
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../components/ui/button";
import { Avatar } from "../../components/ui/avatar";
import { Footer } from "../../components/ui/footer";
import { LogOut, User, Settings, HelpCircle } from "lucide-react";
import { useAuth } from "../../contexts/AuthContext";
import { useGoogleMaps } from "../../hooks/useGoogleMaps";
import { StepSidebar } from "./components/StepSidebar";
import { ClientInfoStep } from "./steps/ClientInfoStep";
import { ProjectInfoStep } from "./steps/ProjectInfoStep";
import { SummaryStep } from "./steps/SummaryStep";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "../../components/ui/dropdown-menu";

export type QuoteStep = 1 | 2 | 3;

interface CreateQuoteProps {
  existingQuote?: any;
  isEditMode?: boolean;
}

interface QuoteFormData {
  fullName: string;
  contactEmail: string;
  clientPhoneNumber: string;
  projectStartDate: {
    month: string;
    day: string;
    year: string;
  };
  projectEndDate: {
    month: string;
    day: string;
    year: string;
  };
  numberOfDeliverables: number;
  deliverables: Array<{
    hours: number;
    minutes: number;
    seconds: number;
  }>;
  filmingDays: number;
  filmingDetails: Array<{
    date: {
      month: string;
      day: string;
      year: string;
    };
    hours: number;
    minutes: number;
    locations: Array<{
      address: string;
      miles: number;
      requiresSetup: boolean;
    }>;
  }>;
  crewPerSetup: number;
  weight: number;
  discount: number;
  rushFee: boolean;
  highTrafficFee: boolean;
}

export const CreateQuote = ({ existingQuote, isEditMode = false }: CreateQuoteProps = {}): JSX.Element => {
  const navigate = useNavigate();
  const { profile, signOut } = useAuth();
  const [currentStep, setCurrentStep] = useState<QuoteStep>(1);

  const googleMapsApiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '';
  const { isLoaded: mapsLoaded } = useGoogleMaps({ apiKey: googleMapsApiKey });

  const getInitialFormData = (): QuoteFormData => {
    if (existingQuote?.form_data) {
      return existingQuote.form_data;
    }
    return {
    fullName: "",
    contactEmail: "",
    clientPhoneNumber: "",
    projectStartDate: { month: "", day: "", year: "" },
    projectEndDate: { month: "", day: "", year: "" },
    numberOfDeliverables: 1,
    deliverables: [
      { hours: 0, minutes: 0, seconds: 0 },
    ],
    filmingDays: 1,
    filmingDetails: [
      {
        date: { month: "", day: "", year: "" },
        hours: 0,
        minutes: 0,
        locations: [{ address: "", miles: 0, requiresSetup: false }],
      },
    ],
      crewPerSetup: 2,
      weight: 60,
      discount: 0,
      rushFee: false,
      highTrafficFee: false,
    };
  };

  const [formData, setFormData] = useState<QuoteFormData>(getInitialFormData());

  const handleLogout = async () => {
    await signOut();
    navigate("/login");
  };

  const handleCancel = () => {
    navigate("/dashboard");
  };

  const handleSaveProgress = () => {
    alert("Progress saved!");
  };

  const handleNext = () => {
    if (currentStep < 3) {
      setCurrentStep((currentStep + 1) as QuoteStep);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep((currentStep - 1) as QuoteStep);
    }
  };

  const handleComplete = () => {
    setCurrentStep(3);
  };

  const updateFormData = (data: Partial<QuoteFormData>) => {
    setFormData((prev) => ({ ...prev, ...data }));
  };

  return (
    <div className="bg-[#ffffff] w-full min-h-screen flex flex-col">
      <header className={`${isEditMode ? 'bg-[#f59e0b]' : 'bg-[#003D82]'} h-[70px] flex items-center justify-between px-8`}>
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <nav className="flex items-center gap-8">
          <button
            onClick={() => navigate("/dashboard")}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Dashboard
          </button>
          <button
            onClick={() => navigate("/create-quote")}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Create Quote
          </button>
          <button
            onClick={() => navigate("/all-quotes")}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            All Quotes
          </button>
        </nav>

        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#003D82] hover:bg-[#002A5C] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || "My Account"}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate("/settings")}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open("mailto:support@example.com", "_blank")}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      <div className="flex flex-col lg:flex-row flex-1">
        <StepSidebar currentStep={currentStep} onStepChange={setCurrentStep} isEditMode={isEditMode} />

        <div className="flex-1 flex flex-col">
          {isEditMode && existingQuote && (
            <div className="bg-gradient-to-r from-[#f59e0b] to-[#fb923c] px-8 py-4 shadow-md">
              <div className="flex items-center justify-between max-w-[1200px] mx-auto">
                <div>
                  <h2 className="[font-family:'Lexend',Helvetica] font-bold text-white text-xl mb-1">
                    Editing Quote for {existingQuote.client_name}
                  </h2>
                  <p className="[font-family:'Lexend',Helvetica] text-white/90 text-sm">
                    Quote ID: {existingQuote.id.slice(0, 8)}... • Status: <span className="font-bold capitalize">{existingQuote.status}</span>
                  </p>
                </div>
              </div>
            </div>
          )}
          {currentStep === 1 && (
            <ClientInfoStep
              formData={formData}
              updateFormData={updateFormData}
              onNext={handleNext}
              onCancel={handleCancel}
              onSaveProgress={handleSaveProgress}
            />
          )}
          {currentStep === 2 && (
            <ProjectInfoStep
              formData={formData}
              updateFormData={updateFormData}
              onNext={handleComplete}
              onBack={handleBack}
              onCancel={handleCancel}
              onSaveProgress={handleSaveProgress}
            />
          )}
          {currentStep === 3 && (
            <SummaryStep
              formData={formData}
              onCreateNewQuote={() => {
                setCurrentStep(1);
                navigate("/create-quote");
              }}
            />
          )}
        </div>
      </div>

      <Footer bgColor={isEditMode ? "bg-[#f59e0b]" : "bg-[#003D82]"} />
    </div>
  );
};
</file>

<file path="src/screens/CreateQuote/steps/ProjectInfoStep.tsx">
import React, { useState } from "react";
import { Button } from "../../../components/ui/button";
import { Label } from "../../../components/ui/label";
import { Plus, Minus, ChevronUp, ChevronDown } from "lucide-react";
import { LocationWithDistance } from "../components/LocationWithDistance";

interface ProjectInfoStepProps {
  formData: any;
  updateFormData: (data: any) => void;
  onNext: () => void;
  onBack?: () => void;
  onCancel: () => void;
  onSaveProgress: () => void;
}

export const ProjectInfoStep: React.FC<ProjectInfoStepProps> = ({
  formData,
  updateFormData,
  onNext,
  onBack,
  onCancel,
  onSaveProgress,
}) => {
  const [expandedDay, setExpandedDay] = useState<number>(0);
  const [isDragging, setIsDragging] = useState<boolean>(false);

  const updateDeliverableCount = (change: number) => {
    const newCount = Math.max(
      1,
      Math.min(7, formData.numberOfDeliverables + change)
    );
    const newDeliverables = [...formData.deliverables];
    while (newDeliverables.length < newCount) {
      newDeliverables.push({ hours: 0, minutes: 0, seconds: 0 });
    }
    updateFormData({
      numberOfDeliverables: newCount,
      deliverables: newDeliverables.slice(0, newCount),
    });
  };

  const updateFilmingDays = (change: number) => {
    const newCount = Math.max(1, Math.min(7, formData.filmingDays + change));
    const newDetails = [...formData.filmingDetails];
    while (newDetails.length < newCount) {
      newDetails.push({
        date: { month: "", day: "", year: "" },
        hours: 0,
        minutes: 0,
        locations: [{ address: "", miles: 0, requiresSetup: false }],
      });
    }
    updateFormData({
      filmingDays: newCount,
      filmingDetails: newDetails.slice(0, newCount),
    });
  };

  const updateDeliverable = (index: number, field: string, value: number) => {
    const newDeliverables = [...formData.deliverables];
    newDeliverables[index] = { ...newDeliverables[index], [field]: value };
    updateFormData({ deliverables: newDeliverables });
  };

  const updateFilmingDetail = (dayIndex: number, field: string, value: any) => {
    const newDetails = [...formData.filmingDetails];
    newDetails[dayIndex] = { ...newDetails[dayIndex], [field]: value };
    updateFormData({ filmingDetails: newDetails });
  };

  const addLocation = (dayIndex: number) => {
    const newDetails = [...formData.filmingDetails];
    newDetails[dayIndex].locations.push({
      address: "",
      miles: 0,
      requiresSetup: false,
    });
    updateFormData({ filmingDetails: newDetails });
  };

  const updateLocation = (
    dayIndex: number,
    locationIndex: number,
    field: string,
    value: any
  ) => {
    const newDetails = [...formData.filmingDetails];
    newDetails[dayIndex].locations[locationIndex] = {
      ...newDetails[dayIndex].locations[locationIndex],
      [field]: value,
    };
    updateFormData({ filmingDetails: newDetails });
  };

  const removeLocation = (dayIndex: number, locationIndex: number) => {
    const newDetails = [...formData.filmingDetails];
    if (newDetails[dayIndex].locations.length > 1) {
      newDetails[dayIndex].locations.splice(locationIndex, 1);
      updateFormData({ filmingDetails: newDetails });
    }
  };

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      <div className="flex-1 px-4 md:px-16 py-6 md:py-12 overflow-y-auto">
        <h3 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-[32px] mb-8">
          Project Information
        </h3>

        <div className="bg-[#E8EFF3] rounded-xl p-8 mb-8">
          <div className="flex items-center gap-3 mb-6">
            <div className="bg-[#003D82] text-white px-4 py-2 rounded [font-family:'Lexend',Helvetica] font-bold text-lg flex items-center gap-2">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="white"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M20 6H4V4h16v2zm-2 4H6v2h12v-2zm-2 6H8v2h8v-2z" />
              </svg>
              Deliverables
            </div>
          </div>

          <div className="flex items-start gap-12">
            <div>
              <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
                Number of Deliverables (1-7)
              </Label>
              <div className="flex items-center gap-3">
                <Button
                  onClick={() => updateDeliverableCount(-1)}
                  className="w-12 h-12 bg-[#8FC4D4] hover:bg-[#7AB8C4] rounded-lg flex items-center justify-center"
                >
                  <Minus className="w-6 h-6 text-black" />
                </Button>
                <div className="w-20 h-12 bg-white rounded-lg flex items-center justify-center [font-family:'Lexend',Helvetica] font-bold text-2xl">
                  {formData.numberOfDeliverables}
                </div>
                <Button
                  onClick={() => updateDeliverableCount(1)}
                  className="w-12 h-12 bg-[#003D82] hover:bg-[#002A5C] rounded-lg flex items-center justify-center"
                >
                  <Plus className="w-6 h-6 text-white" />
                </Button>
              </div>
            </div>

            <div className="flex-1">
              <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
                Average Length per Deliverable
              </Label>
              <div className="bg-white rounded-xl p-4 space-y-3">
                <div className="grid grid-cols-4 gap-4 text-center [font-family:'Lexend',Helvetica] text-sm text-gray-600 font-semibold">
                  <div>Deliverable</div>
                  <div>Hours</div>
                  <div>Minutes</div>
                  <div>Seconds</div>
                </div>
                {formData.deliverables.map((deliverable: any, index: number) => (
                  <div key={index} className="grid grid-cols-4 gap-4 items-center">
                    <div className="bg-[#8FC4D4] text-center py-2 rounded-lg [font-family:'Lexend',Helvetica] font-bold">
                      {index + 1}
                    </div>
                    <input
                      type="number"
                      min="0"
                      value={deliverable.hours}
                      onChange={(e) =>
                        updateDeliverable(index, "hours", parseInt(e.target.value) || 0)
                      }
                      className="h-10 text-center border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-lg"
                    />
                    <input
                      type="number"
                      min="0"
                      max="59"
                      value={deliverable.minutes}
                      onChange={(e) =>
                        updateDeliverable(
                          index,
                          "minutes",
                          parseInt(e.target.value) || 0
                        )
                      }
                      className="h-10 text-center border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-lg"
                    />
                    <input
                      type="number"
                      min="0"
                      max="59"
                      value={deliverable.seconds || 0}
                      onChange={(e) =>
                        updateDeliverable(
                          index,
                          "seconds",
                          parseInt(e.target.value) || 0
                        )
                      }
                      className="h-10 text-center border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-lg"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div className="bg-[#E8EFF3] rounded-xl p-8">
          <div className="flex items-center gap-3 mb-6">
            <div className="bg-[#003D82] text-white px-4 py-2 rounded [font-family:'Lexend',Helvetica] font-bold text-lg flex items-center gap-2">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="white"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z" />
              </svg>
              Filming
            </div>
          </div>

          <div className="mb-6">
            <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
              Filming Days (1-7)
            </Label>
            <div className="flex items-center gap-3">
              <Button
                onClick={() => updateFilmingDays(-1)}
                className="w-12 h-12 bg-[#8FC4D4] hover:bg-[#7AB8C4] rounded-lg flex items-center justify-center"
              >
                <Minus className="w-6 h-6 text-black" />
              </Button>
              <div className="w-32 h-12 bg-white rounded-lg flex items-center justify-center [font-family:'Lexend',Helvetica] font-bold text-2xl">
                {formData.filmingDays}
              </div>
              <Button
                onClick={() => updateFilmingDays(1)}
                className="w-12 h-12 bg-[#003D82] hover:bg-[#002A5C] rounded-lg flex items-center justify-center"
              >
                <Plus className="w-6 h-6 text-white" />
              </Button>
            </div>
          </div>

          <div>
            <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-4 block">
              Filming Details
            </Label>
            <div className="space-y-4">
              {formData.filmingDetails.map((detail: any, dayIndex: number) => (
                <div key={dayIndex} className="bg-white rounded-xl overflow-hidden">
                  <button
                    onClick={() =>
                      setExpandedDay(expandedDay === dayIndex ? -1 : dayIndex)
                    }
                    className="w-full flex items-center justify-between p-4 hover:bg-gray-50"
                  >
                    <div className="flex items-center gap-4">
                      <div className="bg-[#8FC4D4] px-6 py-2 rounded [font-family:'Lexend',Helvetica] font-bold text-lg text-black">
                        Day {dayIndex + 1}
                      </div>
                      <div className="flex items-center gap-2 text-gray-500 [font-family:'Lexend',Helvetica]">
                        <input
                          type="text"
                          placeholder="MM"
                          value={detail.date.month}
                          onChange={(e) =>
                            updateFilmingDetail(dayIndex, "date", {
                              ...detail.date,
                              month: e.target.value,
                            })
                          }
                          onClick={(e) => e.stopPropagation()}
                          className="w-12 text-center border border-gray-300 rounded px-2 py-1"
                          maxLength={2}
                        />
                        <span>/</span>
                        <input
                          type="text"
                          placeholder="DD"
                          value={detail.date.day}
                          onChange={(e) =>
                            updateFilmingDetail(dayIndex, "date", {
                              ...detail.date,
                              day: e.target.value,
                            })
                          }
                          onClick={(e) => e.stopPropagation()}
                          className="w-12 text-center border border-gray-300 rounded px-2 py-1"
                          maxLength={2}
                        />
                        <span>/</span>
                        <input
                          type="text"
                          placeholder="YYYY"
                          value={detail.date.year}
                          onChange={(e) =>
                            updateFilmingDetail(dayIndex, "date", {
                              ...detail.date,
                              year: e.target.value,
                            })
                          }
                          onClick={(e) => e.stopPropagation()}
                          className="w-16 text-center border border-gray-300 rounded px-2 py-1"
                          maxLength={4}
                        />
                      </div>
                    </div>
                    {expandedDay === dayIndex ? (
                      <ChevronUp className="w-6 h-6" />
                    ) : (
                      <ChevronDown className="w-6 h-6" />
                    )}
                  </button>

                  {expandedDay === dayIndex && (
                    <div className="p-6 border-t space-y-6">
                      <div className="grid grid-cols-2 gap-6">
                        <div className="bg-gray-50 rounded-lg p-4 border-2 border-gray-300">
                          <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
                            Hours
                          </Label>
                          <input
                            type="number"
                            min="0"
                            value={detail.hours}
                            onChange={(e) =>
                              updateFilmingDetail(
                                dayIndex,
                                "hours",
                                parseInt(e.target.value) || 0
                              )
                            }
                            className="w-full h-12 text-center border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-lg bg-white"
                          />
                        </div>
                        <div className="bg-gray-50 rounded-lg p-4 border-2 border-gray-300">
                          <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
                            Crew per Setup
                          </Label>
                          <input
                            type="number"
                            min="1"
                            max="7"
                            value={formData.crewPerSetup || ''}
                            onChange={(e) =>
                              updateFormData({
                                crewPerSetup: parseInt(e.target.value) || 0,
                              })
                            }
                            className="w-full h-12 text-center border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-lg bg-white"
                          />
                        </div>
                      </div>

                      <div>
                        <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
                          Location
                        </Label>
                        <div className="space-y-4">
                          {detail.locations.map(
                            (location: any, locationIndex: number) => {
                              const previousAddress = locationIndex > 0
                                ? detail.locations[locationIndex - 1].address
                                : '';

                              return (
                                <div key={locationIndex} className="relative">
                                  <LocationWithDistance
                                    locationIndex={locationIndex}
                                    dayIndex={dayIndex}
                                    location={location}
                                    previousAddress={previousAddress}
                                    updateLocation={updateLocation}
                                  />
                                  {detail.locations.length > 1 && (
                                    <button
                                      onClick={() => removeLocation(dayIndex, locationIndex)}
                                      className="absolute top-2 right-2 text-red-600 hover:text-red-800 bg-white rounded-full p-1 shadow-md"
                                      title="Remove location"
                                    >
                                      <Minus className="w-4 h-4" />
                                    </button>
                                  )}
                                </div>
                              );
                            }
                          )}
                          <button
                            onClick={() => addLocation(dayIndex)}
                            className="text-[#003D82] [font-family:'Lexend',Helvetica] font-semibold text-sm flex items-center gap-2 pl-8"
                          >
                            <Plus className="w-4 h-4" />
                            Add next location
                          </button>
                        </div>
                      </div>

                      <div className="flex justify-end pt-4">
                        <div className="bg-[#003D82] text-white px-4 py-2 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-base flex items-center gap-2">
                          <span>Total Miles:</span>
                          <span>
                            {detail.locations.reduce((sum: number, location: any, idx: number) => {
                              return idx > 0 ? sum + (location.miles || 0) : sum;
                            }, 0)}
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="bg-[#E8EFF3] rounded-xl p-8 mt-8">
          <div className="flex items-center gap-3 mb-6">
            <div className="bg-[#003D82] text-white px-4 py-2 rounded [font-family:'Lexend',Helvetica] font-bold text-lg flex items-center gap-2">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="white"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" stroke="white" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
              Pricing Configuration
            </div>
          </div>

          <div className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base">
                  Weight (Production to Profit) (40-100%)
                </Label>
              </div>
              <div className="flex justify-between text-xs [font-family:'Lexend',Helvetica] text-gray-600 mb-2">
                <span>40%</span>
                <span>55%</span>
                <span>70%</span>
                <span>85%</span>
                <span>100%</span>
              </div>
              <div
                className="relative h-12 flex items-center rounded-lg overflow-visible border-2 border-gray-300 cursor-pointer"
                onMouseDown={(e) => {
                  setIsDragging(true);
                  e.preventDefault();

                  const rect = e.currentTarget.getBoundingClientRect();

                  const handleMove = (moveEvent: MouseEvent) => {
                    const x = moveEvent.clientX - rect.left;
                    const percentage = 40 + ((x / rect.width) * 60);
                    const newWeight = Math.round(Math.max(40, Math.min(100, percentage)));
                    updateFormData({ weight: newWeight });
                  };

                  const handleUp = () => {
                    setIsDragging(false);
                    document.removeEventListener('mousemove', handleMove);
                    document.removeEventListener('mouseup', handleUp);
                  };

                  // Initial position update
                  const x = e.clientX - rect.left;
                  const percentage = 40 + ((x / rect.width) * 60);
                  const newWeight = Math.round(Math.max(40, Math.min(100, percentage)));
                  updateFormData({ weight: newWeight });

                  document.addEventListener('mousemove', handleMove);
                  document.addEventListener('mouseup', handleUp);
                }}
              >
                <div className="absolute left-0 top-0 h-full w-full bg-[#8FC4D4] rounded-md"></div>
                <div
                  className="absolute top-0 h-full bg-[#4a4a4a] rounded-r-md"
                  style={{
                    left: `${((formData.weight || 60) - 40) * (100 / 60)}%`,
                    width: `${(100 - (formData.weight || 60)) * (100 / 60)}%`
                  }}
                />
                <div
                  className="absolute top-0 h-full w-1 bg-white shadow-lg transition-none"
                  style={{
                    left: `${((formData.weight || 60) - 40) * (100 / 60)}%`,
                    transform: 'translateX(-50%)'
                  }}
                >
                  <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-6 h-8 bg-white rounded-md shadow-lg border-2 border-gray-300 flex items-center justify-center transition-none">
                    <div className="flex flex-col gap-1">
                      <div className="w-3 h-0.5 bg-gray-400 rounded"></div>
                      <div className="w-3 h-0.5 bg-gray-400 rounded"></div>
                      <div className="w-3 h-0.5 bg-gray-400 rounded"></div>
                    </div>
                  </div>
                </div>
                <div className="relative z-10 w-full flex items-center justify-between px-4 pointer-events-none">
                  <span className="[font-family:'Lexend',Helvetica] text-sm font-bold text-white">Production Cost</span>
                  <span className="[font-family:'Lexend',Helvetica] text-sm font-bold text-white">Profit (+other expense)</span>
                </div>
              </div>
              <div className="flex items-center justify-center gap-3 mt-4">
                <Label className="[font-family:'Lexend',Helvetica] text-sm text-gray-700">
                  Manual Input:
                </Label>
                <input
                  type="number"
                  min="40"
                  max="100"
                  value={formData.weight || 60}
                  onChange={(e) => {
                    const value = parseInt(e.target.value) || 60;
                    const clampedValue = Math.max(40, Math.min(100, value));
                    updateFormData({ weight: clampedValue });
                  }}
                  className="w-20 h-10 px-3 text-center border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-base bg-white"
                />
                <span className="[font-family:'Lexend',Helvetica] text-sm text-gray-700">%</span>
              </div>
              <div className="text-center mt-2 [font-family:'Lexend',Helvetica] text-xs text-gray-600">
                Defaults to 60% profit
              </div>
            </div>

            <div>
              <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-base mb-3 block">
                Discount (0-20%)
              </Label>
              <input
                type="number"
                min="0"
                max="20"
                value={formData.discount || ''}
                onChange={(e) =>
                  updateFormData({
                    discount: Math.min(20, Math.max(0, parseInt(e.target.value) || 0)),
                  })
                }
                className="w-full h-12 px-4 border-2 border-gray-300 rounded-lg [font-family:'Lexend',Helvetica] text-lg bg-white"
                placeholder=""
              />
            </div>

            <div className="grid grid-cols-2 gap-6">
              <div className="flex items-center gap-3">
                <input
                  type="checkbox"
                  id="rushFee"
                  checked={formData.rushFee || false}
                  onChange={(e) => updateFormData({ rushFee: e.target.checked })}
                  className="w-5 h-5 rounded border-gray-300 text-[#023c97] focus:ring-[#023c97]"
                />
                <Label htmlFor="rushFee" className="[font-family:'Lexend',Helvetica] font-bold text-black text-base cursor-pointer">
                  Apply Rush Fee
                </Label>
              </div>
              <div className="flex items-center gap-3">
                <input
                  type="checkbox"
                  id="highTrafficFee"
                  checked={formData.highTrafficFee || false}
                  onChange={(e) => updateFormData({ highTrafficFee: e.target.checked })}
                  className="w-5 h-5 rounded border-gray-300 text-[#023c97] focus:ring-[#023c97]"
                />
                <Label htmlFor="highTrafficFee" className="[font-family:'Lexend',Helvetica] font-bold text-black text-base cursor-pointer">
                  Apply High Traffic Fee
                </Label>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex flex-col md:flex-row justify-between gap-3 md:gap-4 px-4 md:px-16 py-6 md:py-8 border-t border-gray-200">
        <div>
          {onBack && (
            <Button
              onClick={onBack}
              className="h-[50px] px-8 rounded-lg bg-[#5a5a5a] hover:bg-[#4a4a4a] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
            >
              Back
            </Button>
          )}
        </div>
        <div className="flex flex-col md:flex-row gap-3 md:gap-4">
          <Button
            onClick={onCancel}
            className="h-[50px] px-8 rounded-lg bg-[#5a5a5a] hover:bg-[#4a4a4a] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
          >
            Cancel
          </Button>
          <Button
            onClick={onSaveProgress}
            className="h-[50px] px-8 rounded-lg bg-[#007c89] hover:bg-[#006670] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
          >
            Save Progress
          </Button>
          <Button
            onClick={onNext}
            className="h-[50px] px-8 rounded-lg bg-[#003D82] hover:bg-[#002A5C] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/CreateQuote/steps/ClientInfoStep.tsx">
import React from "react";
import { Button } from "../../../components/ui/button";
import { Input } from "../../../components/ui/input";
import { Label } from "../../../components/ui/label";

interface ClientInfoStepProps {
  formData: any;
  updateFormData: (data: any) => void;
  onNext: () => void;
  onCancel: () => void;
  onSaveProgress: () => void;
}

export const ClientInfoStep: React.FC<ClientInfoStepProps> = ({
  formData,
  updateFormData,
  onNext,
  onCancel,
  onSaveProgress,
}) => {
  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      <div className="flex-1 px-4 md:px-16 py-6 md:py-12 overflow-y-auto">
        <h3 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-[32px] mb-8">
          Client Information
        </h3>

        <div className="bg-[#E8EFF3] rounded-xl p-8 space-y-8 max-w-4xl mb-8">
          <div>
            <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg mb-3 block">
              Full Name
            </Label>
            <Input
              value={formData.fullName}
              onChange={(e) => updateFormData({ fullName: e.target.value })}
              placeholder=""
              className="h-[60px] rounded-xl border-2 border-[#5a5a5a] [font-family:'Lexend',Helvetica] text-lg px-6"
            />
          </div>

          <div className="grid grid-cols-2 gap-8">
            <div>
              <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg mb-3 block">
                Project Start Date
              </Label>
              <div className="flex items-center gap-3 bg-white border-2 border-[#5a5a5a] rounded-xl h-[60px] px-6">
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M19 4H5C3.89543 4 3 4.89543 3 6V20C3 21.1046 3.89543 22 5 22H19C20.1046 22 21 21.1046 21 20V6C21 4.89543 20.1046 4 19 4Z"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M16 2V6"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M8 2V6"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M3 10H21"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <div className="flex items-center gap-2 flex-1">
                  <span className="text-sm text-gray-500"></span>
                  <input
                    type="text"
                    placeholder="MM"
                    value={formData.projectStartDate.month}
                    onChange={(e) =>
                      updateFormData({
                        projectStartDate: {
                          ...formData.projectStartDate,
                          month: e.target.value,
                        },
                      })
                    }
                    className="w-12 [font-family:'Lexend',Helvetica] text-lg outline-none"
                    maxLength={2}
                  />
                  <span className="text-gray-400">/</span>
                  <span className="text-sm text-gray-500"></span>
                  <input
                    type="text"
                    placeholder="DD"
                    value={formData.projectStartDate.day}
                    onChange={(e) =>
                      updateFormData({
                        projectStartDate: {
                          ...formData.projectStartDate,
                          day: e.target.value,
                        },
                      })
                    }
                    className="w-12 [font-family:'Lexend',Helvetica] text-lg outline-none"
                    maxLength={2}
                  />
                  <span className="text-gray-400">/</span>
                  <span className="text-sm text-gray-500"></span>
                  <input
                    type="text"
                    placeholder="YYYY"
                    value={formData.projectStartDate.year}
                    onChange={(e) =>
                      updateFormData({
                        projectStartDate: {
                          ...formData.projectStartDate,
                          year: e.target.value,
                        },
                      })
                    }
                    className="w-16 [font-family:'Lexend',Helvetica] text-lg outline-none"
                    maxLength={4}
                  />
                </div>
              </div>
            </div>

            <div>
              <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg mb-3 block">
                Project End Date
              </Label>
              <div className="flex items-center gap-3 bg-white border-2 border-[#5a5a5a] rounded-xl h-[60px] px-6">
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M19 4H5C3.89543 4 3 4.89543 3 6V20C3 21.1046 3.89543 22 5 22H19C20.1046 22 21 21.1046 21 20V6C21 4.89543 20.1046 4 19 4Z"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M16 2V6"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M8 2V6"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M3 10H21"
                    stroke="#5a5a5a"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <div className="flex items-center gap-2 flex-1">
                  <span className="text-sm text-gray-500"></span>
                  <input
                    type="text"
                    placeholder="MM"
                    value={formData.projectEndDate.month}
                    onChange={(e) =>
                      updateFormData({
                        projectEndDate: {
                          ...formData.projectEndDate,
                          month: e.target.value,
                        },
                      })
                    }
                    className="w-12 [font-family:'Lexend',Helvetica] text-lg outline-none"
                    maxLength={2}
                  />
                  <span className="text-gray-400">/</span>
                  <span className="text-sm text-gray-500"></span>
                  <input
                    type="text"
                    placeholder="DD"
                    value={formData.projectEndDate.day}
                    onChange={(e) =>
                      updateFormData({
                        projectEndDate: {
                          ...formData.projectEndDate,
                          day: e.target.value,
                        },
                      })
                    }
                    className="w-12 [font-family:'Lexend',Helvetica] text-lg outline-none"
                    maxLength={2}
                  />
                  <span className="text-gray-400">/</span>
                  <span className="text-sm text-gray-500"></span>
                  <input
                    type="text"
                    placeholder="YYYY"
                    value={formData.projectEndDate.year}
                    onChange={(e) =>
                      updateFormData({
                        projectEndDate: {
                          ...formData.projectEndDate,
                          year: e.target.value,
                        },
                      })
                    }
                    className="w-16 [font-family:'Lexend',Helvetica] text-lg outline-none"
                    maxLength={4}
                  />
                </div>
              </div>
            </div>
          </div>

          <div>
            <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg mb-3 block">
              Contact Email
            </Label>
            <Input
              type="email"
              value={formData.contactEmail}
              onChange={(e) => updateFormData({ contactEmail: e.target.value })}
              placeholder=""
              className="h-[60px] rounded-xl border-2 border-[#5a5a5a] [font-family:'Lexend',Helvetica] text-lg px-6"
            />
          </div>

          <div>
            <Label className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg mb-3 block">
             Client Phone Number
            </Label>
            <Input
              value={formData.clientPhoneNumber}
              onChange={(e) => updateFormData({ clientPhoneNumber: e.target.value })}
              placeholder=""
              className="h-[60px] rounded-xl border-2 border-[#5a5a5a] [font-family:'Lexend',Helvetica] text-lg px-6"
            />
          </div>
        </div>
      </div>

      <div className="flex flex-col md:flex-row justify-end gap-3 md:gap-4 px-4 md:px-16 py-6 md:py-8 border-t border-gray-200">
        <Button
          onClick={onCancel}
          className="h-[50px] px-8 rounded-lg bg-[#5a5a5a] hover:bg-[#4a4a4a] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
        >
          Cancel
        </Button>
        <Button
          onClick={onSaveProgress}
          className="h-[50px] px-8 rounded-lg bg-[#007c89] hover:bg-[#006670] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
        >
          Save Progress
        </Button>
        <Button
          onClick={onNext}
          className="h-[50px] px-8 rounded-lg bg-[#003D82] hover:bg-[#002A5C] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
        >
          Next
        </Button>
      </div>
    </div>
  );
};
</file>

<file path="src/screens/CreateQuote/steps/SummaryStep.tsx">
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "../../../components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "../../../components/ui/dialog";
import { supabase } from "../../../lib/supabase";
import { useAuth } from "../../../contexts/AuthContext";

interface SummaryStepProps {
  formData: any;
  onCreateNewQuote: () => void;
}

type QuotePackage = "Standard" | "Best Deal" | "Lifejacket";

export const SummaryStep: React.FC<SummaryStepProps> = ({
  formData,
  onCreateNewQuote,
}) => {
  const navigate = useNavigate();
  const { profile } = useAuth();
  const [selectedPackage, setSelectedPackage] = useState<QuotePackage>("Standard");
  const [isSaving, setIsSaving] = useState(false);
  const [quoteSaved, setQuoteSaved] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);

  useEffect(() => {
    if (!quoteSaved && profile?.id) {
      saveQuote();
    }
  }, [profile?.id]);

  const saveQuote = async () => {
    if (isSaving || quoteSaved || !profile?.id) return;

    setIsSaving(true);
    try {
      const startDate = formData.projectStartDate.year && formData.projectStartDate.month && formData.projectStartDate.day
        ? `${formData.projectStartDate.year}-${formData.projectStartDate.month.padStart(2, '0')}-${formData.projectStartDate.day.padStart(2, '0')}`
        : null;

      const endDate = formData.projectEndDate.year && formData.projectEndDate.month && formData.projectEndDate.day
        ? `${formData.projectEndDate.year}-${formData.projectEndDate.month.padStart(2, '0')}-${formData.projectEndDate.day.padStart(2, '0')}`
        : null;

      const { data, error } = await supabase
        .from('quotes')
        .insert({
          client_id: profile.id,
          client_name: formData.fullName,
          client_email: formData.contactEmail,
          client_phone: formData.clientPhoneNumber,
          project_start_date: startDate,
          project_end_date: endDate,
          status: 'draft',
          form_data: formData
        })
        .select()
        .single();

      if (error) throw error;

      setQuoteSaved(true);
    } catch (error) {
      console.error('Error saving quote:', error);
      alert('Failed to save quote. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  const handleEmail = () => {
    alert("Email functionality will be implemented");
  };

  const handlePrint = () => {
    window.print();
  };

  const handleCreateNewQuoteClick = () => {
    setShowConfirmModal(true);
  };

  const handleConfirmCreateNewQuote = () => {
    setShowConfirmModal(false);
    onCreateNewQuote();
    navigate('/dashboard');
  };

  return (
    <>
    <div className="flex-1 flex flex-col overflow-hidden">
      <div className="flex-1 px-4 md:px-16 py-6 md:py-12">
        <div className="flex items-center justify-between mb-8">
          <h2 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-[32px]">
            Quote Summary
          </h2>
        </div>

        <div className="bg-[#E8EFF3] rounded-xl p-8">
          <div className="flex items-center gap-4 mb-8">
            <button
              onClick={() => setSelectedPackage("Standard")}
              className={`flex-1 h-14 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-lg transition-all ${
                selectedPackage === "Standard"
                  ? "bg-[#003D82] text-white"
                  : "bg-[#a0b4b8] text-white hover:bg-[#90a4a8]"
              }`}
            >
              Standard
            </button>
            <button
              onClick={() => setSelectedPackage("Best Deal")}
              className={`flex-1 h-14 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-lg transition-all ${
                selectedPackage === "Best Deal"
                  ? "bg-[#003D82] text-white"
                  : "bg-[#a0b4b8] text-white hover:bg-[#90a4a8]"
              }`}
            >
              Best Deal
            </button>
            <button
              onClick={() => setSelectedPackage("Lifejacket")}
              className={`flex-1 h-14 rounded-lg [font-family:'Lexend',Helvetica] font-bold text-lg transition-all ${
                selectedPackage === "Lifejacket"
                  ? "bg-[#003D82] text-white"
                  : "bg-[#a0b4b8] text-white hover:bg-[#90a4a8]"
              }`}
            >
              Lifejacket
            </button>
          </div>

          <div className="bg-white rounded-xl p-8 min-h-[400px] flex flex-col">
            <div className="mb-8">
              <div className="inline-block bg-[#003D82] text-white px-6 py-2 rounded [font-family:'Lexend',Helvetica] font-bold text-lg mb-8">
                {selectedPackage} Quote
              </div>
            </div>

            <div className="flex items-center justify-center flex-1">
              <div className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-[80px]">
                $$$
              </div>
            </div>

            <div className="mt-8 space-y-4 text-gray-600 [font-family:'Lexend',Helvetica]">
              <div className="flex justify-between">
                <span>Client Name:</span>
                <span className="font-semibold">{formData.fullName || "N/A"}</span>
              </div>
              <div className="flex justify-between">
                <span>Contact Email:</span>
                <span className="font-semibold">{formData.contactEmail || "N/A"}</span>
              </div>
              <div className="flex justify-between">
                <span>Number of Deliverables:</span>
                <span className="font-semibold">{formData.numberOfDeliverables}</span>
              </div>
              <div className="flex justify-between">
                <span>Filming Days:</span>
                <span className="font-semibold">{formData.filmingDays}</span>
              </div>
              <div className="flex justify-between">
                <span>Discount:</span>
                <span className="font-semibold">{formData.discount}%</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex flex-col md:flex-row justify-end gap-3 md:gap-4 px-4 md:px-16 py-6 md:py-8 border-t border-gray-200">
        <Button
          onClick={handleEmail}
          className="h-[50px] px-8 rounded-lg bg-[#007c89] hover:bg-[#006670] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
        >
          Email
        </Button>
        <Button
          onClick={handlePrint}
          className="h-[50px] px-8 rounded-lg bg-[#007c89] hover:bg-[#006670] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
        >
          Print
        </Button>
        <Button
          onClick={handleCreateNewQuoteClick}
          className="h-[50px] px-8 rounded-lg bg-[#003D82] hover:bg-[#002A5C] [font-family:'Lexend',Helvetica] font-bold text-white text-xl"
        >
          Create New Quote
        </Button>
      </div>
    </div>

    <Dialog open={showConfirmModal} onOpenChange={setShowConfirmModal}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="[font-family:'Lexend',Helvetica] font-bold text-xl">
            Create New Quote?
          </DialogTitle>
        </DialogHeader>
        <div className="py-4">
          <p className="[font-family:'Lexend',Helvetica] text-gray-700">
            Are you sure you want to create a new quote? This will take you back to the dashboard.
          </p>
        </div>
        <div className="flex justify-end gap-3">
          <Button
            onClick={() => setShowConfirmModal(false)}
            className="bg-gray-200 text-gray-800 hover:bg-gray-300 [font-family:'Lexend',Helvetica] font-semibold"
          >
            Cancel
          </Button>
          <Button
            onClick={handleConfirmCreateNewQuote}
            className="bg-[#003D82] hover:bg-[#002A5C] text-white [font-family:'Lexend',Helvetica] font-semibold"
          >
            Confirm
          </Button>
        </div>
      </DialogContent>
    </Dialog>
    </>
  );
};
</file>

<file path="src/screens/AdminDashboard/AdminDashboard.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from '../../components/ui/button';
import { Card } from '../../components/ui/card';
import { Avatar } from '../../components/ui/avatar';
import { supabase, Quote } from '../../lib/supabase';
import { useAuth } from '../../contexts/AuthContext';
import { FileText, Download, Mail, Calendar, LogOut, User, Clock, DollarSign, CircleCheck as CheckCircle, TrendingUp, CircleAlert as AlertCircle, CreditCard as Edit, Settings, HelpCircle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { CircularGauge, SemiCircleGauge, ProgressBarGauge } from '../../components/ui/gauge';
import { calculateDashboardMetrics } from '../../lib/dashboardMetrics';
import { generateQuotePDF, generateQuoteExcel, sendQuoteEmail } from '../../lib/exportUtils';
import { getStatusColor, formatDate } from '../../lib/quoteUtils';
import { EditQuoteModal } from '../../components/EditQuoteModal';
import { Footer } from '../../components/ui/footer';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../components/ui/dropdown-menu';

export const AdminDashboard = (): JSX.Element => {
  const { profile, signOut } = useAuth();
  const navigate = useNavigate();
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [loading, setLoading] = useState(true);
  const [growthView, setGrowthView] = useState<'revenue' | 'quotes'>('revenue');
  const isSuperAdmin = profile?.role === 'superadmin';
  const [editingQuote, setEditingQuote] = useState<Quote | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    if (profile?.id) {
      fetchClientQuotes();
    }
  }, [profile]);

  const fetchClientQuotes = async () => {
    if (!profile?.id) return;

    const { data: quotesData } = await supabase
      .from('quotes')
      .select('*')
      .eq('client_id', profile.id)
      .order('created_at', { ascending: false });

    if (quotesData) {
      setQuotes(quotesData as Quote[]);
    }

    setLoading(false);
  };


  const metrics = calculateDashboardMetrics(quotes);
  const completionRate = metrics.totalQuotes > 0
    ? Math.round((metrics.quotesAccepted / metrics.totalQuotes) * 100)
    : 0;

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  const handleExportPDF = async (quote: Quote) => {
    await supabase
      .from('quotes')
      .update({ status: 'pending' })
      .eq('id', quote.id);

    generateQuotePDF(quote);
    fetchClientQuotes();
  };

  const handleEmail = async (quote: Quote) => {
    await sendQuoteEmail(quote);
    await supabase
      .from('quotes')
      .update({ status: 'pending' })
      .eq('id', quote.id);
    fetchClientQuotes();
  };

  const handleEditQuote = (quote: Quote) => {
    setEditingQuote(quote);
    setIsModalOpen(true);
  };

  const handleModalSuccess = () => {
    fetchClientQuotes();
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl [font-family:'Lexend',Helvetica]">Loading...</div>
      </div>
    );
  }

  return (
    <div className="bg-[#f8f9fa] min-h-screen flex flex-col">
      <header className="bg-[#003D82] min-h-[70px] flex flex-col md:flex-row items-center justify-between px-4 md:px-8 py-3 md:py-0 gap-3 md:gap-0">
        <h1 className="[font-family:'Lexend',Helvetica] font-bold text-white text-2xl">
          Vid-QUO
        </h1>
        <div className="flex items-center gap-8">
          <nav className="flex items-center gap-8">
          <button
            onClick={() => navigate('/dashboard')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Dashboard
          </button>
          <button
            onClick={() => navigate('/all-quotes')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            My Quotes
          </button>
          <button
            onClick={() => navigate('/create-quote')}
            className="[font-family:'Lexend',Helvetica] font-semibold text-white text-lg hover:text-[#8FC4D4] transition-colors"
          >
            Create Quote
          </button>
          </nav>

          <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="cursor-pointer focus:outline-none">
                <Avatar className="w-12 h-12 bg-[#003D82] hover:bg-[#4a7a9a] transition-colors">
                  <div className="w-full h-full flex items-center justify-center text-white">
                    <User className="w-6 h-6" />
                  </div>
                </Avatar>
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel className="[font-family:'Lexend',Helvetica]">
                {profile?.full_name || 'My Account'}
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => navigate('/settings')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <Settings className="w-4 h-4 mr-2" />
                Account Settings
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => window.open('mailto:support@example.com', '_blank')}
                className="[font-family:'Lexend',Helvetica] cursor-pointer"
              >
                <HelpCircle className="w-4 h-4 mr-2" />
                Help & Support
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                className="[font-family:'Lexend',Helvetica] cursor-pointer text-red-600 focus:text-red-600"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Logout
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          </div>
        </div>
      </header>

      <div className="max-w-[1400px] mx-auto px-4 md:px-8 py-6 md:py-12">
        <div className="mb-8">
          <h1 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-2xl md:text-4xl mb-2">
            Welcome back, {profile?.full_name || 'Admin'}!
          </h1>
          <p className="[font-family:'Lexend',Helvetica] text-gray-700 text-sm md:text-lg">
            You've completed <span className="font-bold text-[#75c4cc]">{metrics.quotesAccepted}</span> of your quotes. Way to go!
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8">
          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 flex flex-col h-full">
            <div className="mb-4">
              <h3 className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg">
                Quote Status
              </h3>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center py-4">
              <CircularGauge
                value={metrics.quotesAccepted}
                max={metrics.totalQuotes || 1}
                label=""
                subtitle={`of ${metrics.totalQuotes} quotes`}
                icon={<FileText className="w-7 h-7 text-[#5c8bb0]" />}
                color="#5c8bb0"
              />
            </div>
            <div className="space-y-3 mt-4">
              <ProgressBarGauge
                current={metrics.quotesAccepted}
                total={metrics.totalQuotes}
                label="quotes accepted"
                color="#10b981"
              />
              <ProgressBarGauge
                current={metrics.quotesDrafted}
                total={metrics.totalQuotes}
                label="quotes drafted"
                color="#d1d5db"
              />
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 flex flex-col h-full">
            <div className="mb-4">
              <h3 className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg">
                Production Hours
              </h3>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center py-4">
              <SemiCircleGauge
                value={6}
                max={metrics.totalFilmingHours || 1}
                label=""
                subtitle={`of ${metrics.totalFilmingHours} hours`}
                icon={<Clock className="w-6 h-6 text-[#5c8bb0]" />}
                color="#5c8bb0"
              />
            </div>
            <div className="space-y-3 mt-4">
              <ProgressBarGauge
                current={metrics.acceptedFilmingHours}
                total={metrics.totalFilmingHours}
                label="hours accepted"
                color="#10b981"
              />
              <ProgressBarGauge
                current={metrics.totalFilmingHours - metrics.acceptedFilmingHours}
                total={metrics.totalFilmingHours}
                label="hours drafted"
                color="#d1d5db"
              />
            </div>
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 flex flex-col h-full">
            <div className="mb-4">
              <h3 className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg">
                Days Scheduled
              </h3>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center py-4">
              <SemiCircleGauge
                value={metrics.acceptedDaysScheduled}
                max={metrics.daysScheduled || 1}
                label=""
                subtitle={`of ${metrics.daysScheduled} days`}
                icon={<Calendar className="w-6 h-6 text-[#5c8bb0]" />}
                color="#5c8bb0"
              />
            </div>
            <div className="space-y-3 mt-4">
              <ProgressBarGauge
                current={metrics.acceptedDaysScheduled}
                total={metrics.daysScheduled}
                label="days accepted"
                color="#10b981"
              />
              <ProgressBarGauge
                current={metrics.daysScheduled - metrics.acceptedDaysScheduled}
                total={metrics.daysScheduled}
                label="days drafted"
                color="#d1d5db"
              />
            </div>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <Card className="p-4 md:p-6 bg-white rounded-xl border-2 border-gray-200 overflow-hidden">
            <div className="flex items-center justify-between mb-6">
              <h3 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-xl">
                Month-over-Month Growth
              </h3>
              <div className="flex items-center gap-2">
                <div className="flex items-center bg-gray-100 rounded-lg p-1">
                  <button
                    onClick={() => setGrowthView('revenue')}
                    className={`px-3 py-1 rounded-md text-xs [font-family:'Lexend',Helvetica] font-medium transition-all ${
                      growthView === 'revenue'
                        ? 'bg-[#003D82] text-white'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    Revenue
                  </button>
                  <button
                    onClick={() => setGrowthView('quotes')}
                    className={`px-3 py-1 rounded-md text-xs [font-family:'Lexend',Helvetica] font-medium transition-all ${
                      growthView === 'quotes'
                        ? 'bg-[#003D82] text-white'
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    Quotes
                  </button>
                </div>
              </div>
            </div>

            {growthView === 'revenue' ? (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <span className="[font-family:'Lexend',Helvetica] text-sm font-medium text-gray-600">
                    Revenue Growth
                  </span>
                  <span className={`[font-family:'Lexend',Helvetica] text-2xl font-bold ${metrics.revenueGrowthPercent >= 0 ? 'text-[#10b981]' : 'text-red-500'}`}>
                    {metrics.revenueGrowthPercent > 0 ? '+' : ''}{metrics.revenueGrowthPercent}%
                  </span>
                </div>

                <div className="relative h-48 mb-4">
                  <svg width="100%" height="100%" className="overflow-visible">
                    {metrics.monthlyData.map((data, index) => {
                      const x = (index / (metrics.monthlyData.length - 1)) * 100;
                      const maxRevenue = Math.max(...metrics.monthlyData.map(d => d.revenue), 1);
                      const y = 100 - (data.revenue / maxRevenue) * 80;

                      return (
                        <g key={index}>
                          <line
                            x1={`${x}%`}
                            y1="100%"
                            x2={`${x}%`}
                            y2="0%"
                            stroke="#f0f0f0"
                            strokeWidth="1"
                          />
                          <text
                            x={`${x}%`}
                            y="100%"
                            dy="16"
                            textAnchor="middle"
                            className="[font-family:'Lexend',Helvetica] text-xs fill-gray-500"
                          >
                            {data.month}
                          </text>
                        </g>
                      );
                    })}

                    <polyline
                      points={metrics.monthlyData.map((data, index) => {
                        const x = (index / (metrics.monthlyData.length - 1)) * 100;
                        const maxRevenue = Math.max(...metrics.monthlyData.map(d => d.revenue), 1);
                        const y = 100 - (data.revenue / maxRevenue) * 80;
                        return `${x}%,${y}%`;
                      }).join(' ')}
                      fill="none"
                      stroke="#10b981"
                      strokeWidth="3"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />

                    {metrics.monthlyData.map((data, index) => {
                      const x = (index / (metrics.monthlyData.length - 1)) * 100;
                      const maxRevenue = Math.max(...metrics.monthlyData.map(d => d.revenue), 1);
                      const y = 100 - (data.revenue / maxRevenue) * 80;

                      return (
                        <g key={index}>
                          <circle
                            cx={`${x}%`}
                            cy={`${y}%`}
                            r="4"
                            fill="#10b981"
                          />
                          <text
                            x={`${x}%`}
                            y={`${y}%`}
                            dy="-10"
                            textAnchor="middle"
                            className="[font-family:'Lexend',Helvetica] text-xs font-bold fill-[#10b981]"
                          >
                            ${(data.revenue / 1000).toFixed(0)}k
                          </text>
                        </g>
                      );
                    })}
                  </svg>
                </div>

                <div className="grid grid-cols-2 gap-4 pt-4 border-t border-gray-200">
                  <div className="bg-gray-50 p-3 rounded-lg">
                    <div className="[font-family:'Lexend',Helvetica] text-xs text-gray-500 mb-1">
                      Last Month
                    </div>
                    <div className="[font-family:'Lexend',Helvetica] font-bold text-lg text-gray-600">
                      ${metrics.lastMonthRevenue.toLocaleString()}
                    </div>
                  </div>
                  <div className="bg-[#10b981]/10 p-3 rounded-lg">
                    <div className="[font-family:'Lexend',Helvetica] text-xs text-gray-500 mb-1">
                      This Month
                    </div>
                    <div className="[font-family:'Lexend',Helvetica] font-bold text-lg text-[#10b981]">
                      ${metrics.currentMonthRevenue.toLocaleString()}
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <span className="[font-family:'Lexend',Helvetica] text-sm font-medium text-gray-600">
                    Quotes Growth
                  </span>
                  <span className={`[font-family:'Lexend',Helvetica] text-2xl font-bold ${metrics.quotesGrowthPercent >= 0 ? 'text-[#10b981]' : 'text-red-500'}`}>
                    {metrics.quotesGrowthPercent > 0 ? '+' : ''}{metrics.quotesGrowthPercent}%
                  </span>
                </div>

                <div className="relative h-48 mb-4">
                  <svg width="100%" height="100%" className="overflow-visible">
                    {metrics.monthlyData.map((data, index) => {
                      const x = (index / (metrics.monthlyData.length - 1)) * 100;

                      return (
                        <g key={index}>
                          <line
                            x1={`${x}%`}
                            y1="100%"
                            x2={`${x}%`}
                            y2="0%"
                            stroke="#f0f0f0"
                            strokeWidth="1"
                          />
                          <text
                            x={`${x}%`}
                            y="100%"
                            dy="16"
                            textAnchor="middle"
                            className="[font-family:'Lexend',Helvetica] text-xs fill-gray-500"
                          >
                            {data.month}
                          </text>
                        </g>
                      );
                    })}

                    <polyline
                      points={metrics.monthlyData.map((data, index) => {
                        const x = (index / (metrics.monthlyData.length - 1)) * 100;
                        const maxQuotes = Math.max(...metrics.monthlyData.map(d => d.quotes), 1);
                        const y = 100 - (data.quotes / maxQuotes) * 80;
                        return `${x}%,${y}%`;
                      }).join(' ')}
                      fill="none"
                      stroke="#75c4cc"
                      strokeWidth="3"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />

                    {metrics.monthlyData.map((data, index) => {
                      const x = (index / (metrics.monthlyData.length - 1)) * 100;
                      const maxQuotes = Math.max(...metrics.monthlyData.map(d => d.quotes), 1);
                      const y = 100 - (data.quotes / maxQuotes) * 80;

                      return (
                        <g key={index}>
                          <circle
                            cx={`${x}%`}
                            cy={`${y}%`}
                            r="4"
                            fill="#75c4cc"
                          />
                          <text
                            x={`${x}%`}
                            y={`${y}%`}
                            dy="-10"
                            textAnchor="middle"
                            className="[font-family:'Lexend',Helvetica] text-xs font-bold fill-[#75c4cc]"
                          >
                            {data.quotes}
                          </text>
                        </g>
                      );
                    })}
                  </svg>
                </div>

                <div className="grid grid-cols-2 gap-4 pt-4 border-t border-gray-200">
                  <div className="bg-gray-50 p-3 rounded-lg">
                    <div className="[font-family:'Lexend',Helvetica] text-xs text-gray-500 mb-1">
                      Last Month
                    </div>
                    <div className="[font-family:'Lexend',Helvetica] font-bold text-lg text-gray-600">
                      {metrics.lastMonthQuotes}
                    </div>
                  </div>
                  <div className="bg-[#75c4cc]/10 p-3 rounded-lg">
                    <div className="[font-family:'Lexend',Helvetica] text-xs text-gray-500 mb-1">
                      This Month
                    </div>
                    <div className="[font-family:'Lexend',Helvetica] font-bold text-lg text-[#75c4cc]">
                      {metrics.currentMonthQuotes}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </Card>

          <Card className="p-6 bg-white rounded-xl border-2 border-gray-200 flex flex-col h-full">
            <div className="mb-4">
              <h3 className="[font-family:'Lexend',Helvetica] font-bold text-black text-lg">
                Revenue Overview
              </h3>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center py-4">
              <SemiCircleGauge
                value={metrics.actualRevenue}
                max={metrics.totalPotentialRevenue || 1}
                label=""
                subtitle={`of $${(metrics.totalPotentialRevenue / 1000).toFixed(1)}k`}
                icon={<DollarSign className="w-6 h-6 text-[#5c8bb0]" />}
                color="#5c8bb0"
                valueFormatter={(val) => `$${(val / 1000).toFixed(1)}k`}
              />
            </div>
            <div className="space-y-3 mt-4">
              <ProgressBarGauge
                current={metrics.actualRevenue}
                total={metrics.totalPotentialRevenue}
                label={`$${metrics.actualRevenue.toLocaleString()} revenue accepted`}
                color="#10b981"
              />
              <ProgressBarGauge
                current={metrics.totalPotentialRevenue - metrics.actualRevenue}
                total={metrics.totalPotentialRevenue}
                label={`$${(metrics.totalPotentialRevenue - metrics.actualRevenue).toLocaleString()} revenue drafted`}
                color="#d1d5db"
              />
            
            </div>
          </Card>
        </div>

        <div className="mb-6">
          <h2 className="[font-family:'Lexend',Helvetica] font-bold text-[#003D82] text-2xl mb-4">
            Recent Quotes
          </h2>
        </div>

        <Card className="bg-white rounded-xl overflow-hidden">
          <div className="overflow-x-auto">
          <table className="w-full min-w-[640px]">
            <thead className="bg-[#003D82]">
              <tr>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  CLIENT NAME
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  DATE CREATED
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  STATUS
                </th>
                <th className="px-6 py-4 text-left [font-family:'Lexend',Helvetica] font-bold text-white text-lg">
                  ACTION
                </th>
              </tr>
            </thead>
            <tbody>
              {quotes.length > 0 ? (
                quotes.slice(0, 5).map((quote, index) => (
                  <tr key={quote.id} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
                    <td className="px-6 py-4">
                      <button
                        onClick={() => handleEditQuote(quote)}
                        className="space-y-1 hover:opacity-75 transition-opacity text-left w-full"
                      >
                        <div className="[font-family:'Lexend',Helvetica] font-semibold text-lg flex items-center gap-2">
                          <Edit className="w-4 h-4 text-gray-600" />
                          {quote.client_name}
                        </div>
                        <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-600">
                          {quote.client_phone || 'N/A'}
                        </div>
                      </button>
                    </td>
                    <td className="px-6 py-4 [font-family:'Lexend',Helvetica] text-lg">
                      {formatDate(quote.created_at)}
                    </td>
                    <td className="px-6 py-4">
                      <span className={`px-3 py-1 rounded-full [font-family:'Lexend',Helvetica] font-semibold text-sm capitalize ${getStatusColor(quote.status)}`}>
                        {quote.status}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-2">
                        <Button
                          onClick={() => handleEmail(quote)}
                          className="bg-[#003D82] hover:bg-[#002A5C] text-white px-4 py-2 rounded-lg"
                        >
                          <Mail className="w-4 h-4 mr-2" />
                          <span className="[font-family:'Lexend',Helvetica] font-semibold text-sm">
                            Email
                          </span>
                        </Button>
                        <Button
                          onClick={() => handleExportPDF(quote)}
                          className="bg-white hover:bg-gray-50 text-[#003D82] border-2 border-[#003D82] px-4 py-2 rounded-lg"
                        >
                          <Download className="w-4 h-4 mr-2" />
                          <span className="[font-family:'Lexend',Helvetica] font-semibold text-sm">
                            PDF Export
                          </span>
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={4} className="px-6 py-12 text-center">
                    <div className="flex flex-col items-center justify-center">
                      <FileText className="w-16 h-16 text-gray-300 mb-4" />
                      <div className="[font-family:'Lexend',Helvetica] text-gray-500 text-lg">
                        No quotes yet
                      </div>
                      <div className="[font-family:'Lexend',Helvetica] text-gray-400 text-sm mt-2">
                        Create your first quote to get started
                      </div>
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          </div>
        </Card>
      </div>

      {editingQuote && (
        <EditQuoteModal
          quote={editingQuote}
          open={isModalOpen}
          onOpenChange={setIsModalOpen}
          onSuccess={handleModalSuccess}
        />
      )}

      <Footer bgColor="bg-[#003D82]" />
    </div>
  );
};
</file>

<file path="src/components/ui/gauge.tsx">
import React from 'react';

interface GaugeProps {
  value: number;
  max: number;
  label: string;
  subtitle?: string;
  icon?: React.ReactNode;
  size?: 'small' | 'medium' | 'large' | number;
  color?: string;
}

export const CircularGauge: React.FC<GaugeProps> = ({
  value,
  max,
  label,
  subtitle,
  icon,
  size = 'medium',
  color = '#5c8bb0',
}) => {
  const percentage = Math.min((value / max) * 100, 100);

  let radius: number;
  if (typeof size === 'number') {
    radius = size;
  } else {
    switch (size) {
      case 'small':
        radius = 60;
        break;
      case 'large':
        radius = 120;
        break;
      case 'medium':
      default:
        radius = 90;
        break;
    }
  }

  const strokeWidth = Math.max(radius * 0.27, 10);
  const normalizedRadius = radius - strokeWidth / 2;
  const circumference = normalizedRadius * 2 * Math.PI;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;

  const gradientId = `gradient-circular-${label.replace(/\s/g, '-')}`;

  return (
    <div className="flex flex-col items-center justify-center">
      <div className="relative">
        <svg height={radius * 2} width={radius * 2} className="transform -rotate-90">
          <defs>
            <linearGradient id={gradientId} x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor={color} stopOpacity="1" />
              <stop offset="100%" stopColor={color} stopOpacity="0.5" />
            </linearGradient>
          </defs>
          <circle
            stroke="#e5e7eb"
            fill="transparent"
            strokeWidth={strokeWidth}
            r={normalizedRadius}
            cx={radius}
            cy={radius}
          />
          <circle
            stroke={`url(#${gradientId})`}
            fill="transparent"
            strokeWidth={strokeWidth}
            strokeDasharray={circumference + ' ' + circumference}
            style={{ strokeDashoffset, transition: 'stroke-dashoffset 0.5s ease' }}
            strokeLinecap="round"
            r={normalizedRadius}
            cx={radius}
            cy={radius}
          />
        </svg>
        <div className="absolute inset-0 flex flex-col items-center justify-center">
          <div className="flex items-center gap-2">
            {icon}
            <div className="[font-family:'Lexend',Helvetica] font-bold text-4xl" style={{ color: '#4a7090' }}>
              {value}
            </div>
          </div>
          {subtitle && (
            <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-500 mt-1">
              {subtitle}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

interface ProgressBarGaugeProps {
  current: number;
  total: number;
  label: string;
  color?: string;
}

export const ProgressBarGauge: React.FC<ProgressBarGaugeProps> = ({
  current,
  total,
  label,
  color = '#10b981',
}) => {
  const percentage = total > 0 ? (current / total) * 100 : 0;

  return (
    <div className="w-full">
      <div className="flex items-center justify-between mb-2">
        <span className="[font-family:'Lexend',Helvetica] text-sm font-medium text-gray-700">
          {label}
        </span>
        <span className="[font-family:'Lexend',Helvetica] text-sm font-semibold text-[#023c97]">
          {current} / {total}
        </span>
      </div>
      <div className="w-full h-3 bg-gray-200 rounded-full overflow-hidden">
        <div
          className="h-full rounded-full transition-all duration-500"
          style={{ width: `${percentage}%`, backgroundColor: color }}
        />
      </div>
    </div>
  );
};

interface SemiCircleGaugeProps {
  value: number;
  max: number;
  label: string;
  subtitle?: string;
  icon?: React.ReactNode;
  color?: string;
  valueFormatter?: (value: number) => string;
  size?: 'small' | 'medium' | 'large' | number;
  aspectRatio?: number;
}

export const SemiCircleGauge: React.FC<SemiCircleGaugeProps> = ({
  value,
  max,
  label,
  subtitle,
  icon,
  color = '#5c8bb0',
  valueFormatter,
  size = 110,
  aspectRatio = 1,
}) => {
  const percentage = Math.min((value / max) * 100, 100);

  let radius: number;
  if (typeof size === 'number') {
    radius = size;
  } else {
    switch (size) {
      case 'small':
        radius = 50;
        break;
      case 'large':
        radius = 100;
        break;
      case 'medium':
      default:
        radius = 72;
        break;
    }
  }

  const strokeWidth = Math.max(radius * 0.27, 10);
  const radiusX = radius * aspectRatio;
  const radiusY = radius;
  const normalizedRadiusX = radiusX - strokeWidth / 2;
  const normalizedRadiusY = radiusY - strokeWidth / 2;
  const circumference = normalizedRadiusX * Math.PI;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;
  const displayValue = valueFormatter ? valueFormatter(value) : value;

  const padding = strokeWidth / 2;
  const startX = padding;
  const endX = startX + (radiusX * 2);
  const centerY = radiusY + padding;
  const pathD = `M ${startX} ${centerY} A ${radiusX} ${radiusY} 0 0 1 ${endX} ${centerY}`;

  const svgHeight = radiusY + strokeWidth;
  const svgWidth = radiusX * 2 + strokeWidth;
  const gradientId = `gradient-semi-${label.replace(/\s/g, '-')}`;

  return (
    <div className="flex flex-col items-center justify-center mb-4">
      <div className="relative mb-4">
        <svg height={svgHeight} width={svgWidth}>
          <defs>
            <linearGradient id={gradientId} x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stopColor={color} stopOpacity="0.65" />
              <stop offset="100%" stopColor={color} stopOpacity="1" />
            </linearGradient>
            <clipPath id={`clip-${label.replace(/\s/g, '-')}`}>
              <rect x={startX - strokeWidth/2} y="0" width={(endX - startX) + strokeWidth} height={svgHeight} />
            </clipPath>
          </defs>
          <path
            d={pathD}
            stroke="#e5e7eb"
            fill="transparent"
            strokeWidth={strokeWidth}
            strokeLinecap="butt"
          />
          {percentage > 0 && (
            <g clipPath={`url(#clip-${label.replace(/\s/g, '-')})`}>
              <path
                d={pathD}
                stroke={`url(#${gradientId})`}
                fill="transparent"
                strokeWidth={strokeWidth}
                strokeDasharray={`${circumference} ${circumference}`}
                style={{ strokeDashoffset, transition: 'stroke-dashoffset 0.5s ease' }}
                strokeLinecap="round"
              />
            </g>
          )}
          <rect
            x={startX - strokeWidth/2}
            y={centerY} 
            width={strokeWidth}
            height={strokeWidth}
            fill="white"
          />
        </svg>
        <div className="absolute inset-0 flex flex-col items-center" style={{ top: '45%' }}>
          <div className="flex items-center gap-2">
            {icon}
            <div className="[font-family:'Lexend',Helvetica] font-bold text-3xl" style={{ color: '#4a7090' }}>
              {displayValue}
            </div>
          </div>
          {subtitle && (
            <div className="[font-family:'Lexend',Helvetica] text-sm text-gray-500 mt-1">
              {subtitle}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
</file>

</files>
